/*
 	Title: javascript.js

	About:
		Created - 2008-09-19
		Author - Susan Kelly

		Updated - 2010-12-01
		Author - Alex Wack

	Description:
		This file contains the javascript functions to support the asynchronus update of blog categories

	Methods:

		deleteRecord(catID)
			Purpose: Removes a category
			Inputs: catID - BlogCategoryID of category being edited

 */

$j(window).load( function() {

	// toggle individual comments
	$j("a.commentToggle").click( function() {

		// find our parent div
		$j(this)
			.parents("div.commentBody")
				// then find the comment itself
				.find("div.commentContent")
					.toggle();

	} );

	// toggle board topic lists
	$j("a.collapseTopic").click( function() {
		$j(this).toggleClass('topicCollapsed');

		// deal with cookies when we toggle
		var discid = $j(this).parents('.sortableTable').attr('data-discid');
		if($j.cookie('discussion_' + discid) == 'true'){
			$j.cookie('discussion_' + discid, false, { expires: 365 });
		}else{
			$j.cookie('discussion_' + discid, true, { expires: 365 });
		}

		// find our parent row
		$j(this)
			.parents("tr:first")
				// get the next row
				.next()
					// and toggle it
					.toggle();

	} );

} );



var cfcPathForum = 'cf_blog/include/forum.cfc';

//Updated by Alex Wack on 11/17/2010 to use a jQuery Ajax Post rather than the Yahoo Ajax handler
function okToDelete(pageId,entryId,commentId,view) {

	$j.ajax({
		type: "POST",
		url: cfcPathForum+'?method=getReplyThread',
		data: ({
			edittext: 1,
			currentCommentID: commentId,
			entryID: entryId
		}),
		datatype: "xml",
		success: function(xmlString){

			startPos = xmlString.indexOf('<string>',0);
			endPos = xmlString.indexOf('</string>',0);

			stringPart = xmlString.slice(startPos,endPos).replace('<string>','');

			var idCount = 0;
			// If the a string was returned, split the string at the commas and get the length of the array
			if (stringPart.length > 0) {
				stringPart += ',';
				var idArray = stringPart.split(',');
				idCount = idArray.length;
			}

			var confirmText = '';

			var okToDelete = false;

			var numBranches = idCount - 2; // remove 2 as the first item is the comment and the last item is "blank" from array split

			if (numBranches == 0) {
				confirmText = 'Selecting OK will permanently delete this comment.  Are you sure you want to delete this comment.  ';
			} else if (numBranches == 1) {
				confirmText = 'Selecting OK will permanently delete this comment and the one reply to this comment. ';
			} else {
				confirmText = 'Selecting OK will permanently delete this comment and the ' + numBranches + ' replies to this comment. ';
			}

			if (idCount > 0) { okToDelete = confirm(confirmText); }

			if (okToDelete) {

				var doLocation = "";

				// if we are in page.cfm, proceed as normal
				if ( $j.url("file") == "page.cfm" ) {

					document.location.href = 'page.cfm?p=' + pageId + '&eid=' + entryId + '&cid=' + commentId + '&do=deletecomment&view=' + view;

				// otherwise we're in groups.cfm
				} else {

					document.location.href = "groups.cfm?groupID=" + $j.url("?groupID") + "&tab=" + $j.url("?tab") + "&discID=" + $j.url("?discID") + "&eid=" + entryId + "&cid=" + commentId + "&do=deletecomment&view=" + view;

				}

			}

			return okToDelete;
		},

		failure:function(xml){
			// Failure handler
			alert('There was an error deleting the category.');
			return false;
		}
	});

}

function toggleCommentView(which) {
	commentBlock = document.getElementById('show_'+which);
	if(commentBlock.style.display == 'none') {
		commentBlock.style.display = 'block';
		document.getElementById('viewlink_'+which).innerHTML = 'hide';
	}
	else {
		commentBlock.style.display = 'none';
		document.getElementById('viewlink_'+which).innerHTML = 'expand';
	}
}

function hideAll() {
	for(var i=0; i<commentArray.length; i++){
		document.getElementById('show_'+commentArray[i]).style.display = 'none';
		document.getElementById('viewlink_'+commentArray[i]).innerHTML = 'expand';
	}
}

function expandAll() {
	for(var i=0; i<commentArray.length; i++){
		document.getElementById('show_'+commentArray[i]).style.display = 'block';
		document.getElementById('viewlink_'+commentArray[i]).innerHTML = 'hide';
	}
}

function quoteThis(cid,originatorName) {
	var quotedText = document.getElementById('show_'+cid).innerHTML;
	var inst = tinyMCE.activeEditor;

	var nameText = 'Originally posted by <strong>' + originatorName + '</strong><br>';

	var currentText = inst.getContent();
	inst.setContent(currentText + '<blockquote class="blockquote">' + nameText + quotedText + '</blockquote><br>');
}



function updatereply(isParentPublished) {

	var okToPublish = true;

	// if the previous comment is published, the reply can be posted.  Otherwise, prompt the user (admin user) letting them know
	// by responding they will be publishing the parent post.  If the current post is marked as private, publishing the post will
	// mark the parent comment as private
	if (isParentPublished == 0) {

		// firrst check to see if markPrivate is a checkbox or a hidden value.
		var elems = document.getElementsByName('markPrivate');
		var makePrivate = 0;

		// You are replying to an unpublished comment.  Publishing your reply will privately publish both your reply and the associated comment.  Do you wish to continue with publishing your reply?

		if ( elems.length == 1 ) {
			var elemType = elems[0].type;
			if (elemType == 'hidden' || (elemType == 'checkbox' && elems[0].checked)) {
				makePrivate = elems[0].value * 1;
			}

			var msg = 'You are replying to an unpublished comment.  Publishing your reply will publish both your reply and the associated comment.  Do you wish to continue with publishing your reply?';

			if (makePrivate) {
				msg = 'You are replying to an unpublished comment.  Publishing your reply will privately publish both your reply and the associated comment.  Do you wish to continue with publishing your reply?';
			}

			okToPublish = confirm(msg);
		}
	}


	if ( okToPublish ) {
		document.update.publish.value  = 1;
		document.update.submit();
	}
}

function updateForumPost(currentStatus)
{
	document.update.publish.value = currentStatus;
	document.update.submit();
}
function unpublish(currentStatus)
{
	var okToUnpublish = true;
	if (currentStatus == 1) {
		okToUnpublish = confirm('Are you sure you want to un-publish this comment.  Un-publishing this comment will remove it from the front end until it is published.');
	}

	if (okToUnpublish) {
		document.update.publish.value  = 0;
		//moved submit() into the if statement so that clicking cancel on the confirm dialog does not submit the form
		document.update.submit();
	}
}

function saveForumDraft()
{
	document.update.publish.value = 0;
	document.update.submit();
}

// ==========================================================================
// ! jQuery plugin gently breaks long, unwrappable strings to assist layout
// ==========================================================================
$j(document).ready( function() {

	// if we have a the plugin
	if ( typeof $j.fn.fsBreakly != "undefined" ) {
		// every 38th character we'll add a zero-length space character
		$j("div.blogtopic div, div.blogpost div, div.commentContent").not(":has(#message, .mceEditor)").fsBreakly(38);
	}

	// if we have a the plugin
	if ( typeof $j.fn.qtip != "undefined" ) {
		// tooltips
		$j("span.forumCommentIcon, span.forumViewIcon, span.forumLastPostIcon").qtip( {
			position : {
				my: 'bottom center',
				at: 'top center',
				viewport: $j(window)
			},
			style : {
				classes: 'fs-tooltip ui-tooltip-rounded'
			}
		} );
	}

	// Disable Publish/Save Draft/Cancel buttons when they are clicked to prevent double posts
	$j('.blogButtons').on('click', function() {
		$j('.blogButtons').prop('disabled', true).addClass('blogButtonsDisabled');
	});

} );


