<div id="cha-a_toy_app" data-tralics-id="cid9" class="chapter" data-number="2" data-chapter="toy_app"><h1><a href="toy_app_fragment.html#cha-a_toy_app" class="heading hyperref"><span class="number">Chapter 2 </span>A toy app</a></h1>
<p>In this chapter, we’ll develop a toy demo application to show off some of the power of Rails.<span class="intersentencespace"></span> The purpose is to get a high-level overview of Ruby on Rails programming (and web development in general) by rapidly generating an application using <em>scaffold generators</em>, which create a large amount of functionality automatically.<span class="intersentencespace"></span> As discussed in <a href="beginning_fragment.html#aside-scaffolding" class="hyperref">Box <span class="ref">1.2</span></a>, the rest of the book will take the opposite approach, developing a full sample application incrementally and explaining each new concept as it arises, but for a quick overview (and some instant gratification) there is no substitute for scaffolding.<span class="intersentencespace"></span> The resulting toy app will allow us to interact with it through its URLs, giving us insight into the structure of a Rails application, including a first example of the <em>REST architecture</em> favored by Rails.</p>
<p>As with the forthcoming sample application, the toy app will consist of <em>users</em> and their associated <em>microposts</em> (thus constituting a minimalist Twitter-style app).<span class="intersentencespace"></span> The functionality will be utterly under-developed, and many of the steps will seem like magic, but worry not: the full sample app will develop a similar application from the ground up starting in <a href="static_pages_fragment.html#cha-static_pages" class="hyperref">Chapter <span class="ref">3</span></a>, and I will provide plentiful forward-references to later material.<span class="intersentencespace"></span> In the mean time, have patience and a little faith—the whole point of this tutorial is to take you <em>beyond</em> this superficial, scaffold-driven approach to achieve a deeper understanding of Rails.</p>
</div><div id="sec-planning_the_application" data-tralics-id="cid10" class="section" data-number="2.1"><h2><a href="toy_app_fragment.html#sec-planning_the_application" class="heading hyperref"><span class="number">2.1 </span>Planning the application</a></h2>
<p>In this section, we’ll outline our plans for the toy application.<span class="intersentencespace"></span> As in <a href="beginning_fragment.html#sec-the_hello_application" class="hyperref">Section <span class="ref">1.3</span></a>, we’ll start by generating the application skeleton using the <code>rails new</code> command with a specific Rails version number:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">cd</span> ~/workspace
<span class="gp">$</span> rails _4.2.2_ new toy_app
<span class="gp">$</span> <span class="nb">cd </span>toy_app/
</pre></div></div>
<p>If the command above returns an error like “Could not find ’railties”’, it means you don’t have the right version of Rails installed, and you should double-check that you followed the command in <a href="beginning_fragment.html#code-installing_rails" class="hyperref">Listing <span class="ref">1.1</span></a> exactly as written.<span class="intersentencespace"></span> (If you’re using the cloud IDE as recommended in <a href="beginning_fragment.html#sec-development_environment" class="hyperref">Section <span class="ref">1.2.1</span></a>, note that this second app can be created in the same workspace as the first.<span class="intersentencespace"></span> It is not necessary to create a new workspace.<span class="intersentencespace"></span> In order to get the files to appear, you may need to click the gear icon in the file navigator area and select “Refresh File Tree”.)</p>
<p>Next, we’ll use a text editor to update the <code>Gemfile</code> needed by Bundler with the contents of <a href="toy_app_fragment.html#code-demo_gemfile_sqlite_version_redux" class="hyperref">Listing <span class="ref">2.1</span></a>.<span class="intersentencespace"></span> <strong>Important note: Unless you are reading this at railstutorial.org, you should use the application Gemfile listed at <a href="http://gemfiles-3rd-ed.railstutorial.org/" target="_blank">gemfiles-3rd-ed.railstutorial.org</a> instead of the one listed here.</strong></p>
<div class="codelisting" id="code-demo_gemfile_sqlite_version_redux" data-tralics-id="uid120" data-number="2.1"><div class="heading"><span class="number">Listing 2.1:</span> 

<span class="description">A <code>Gemfile</code> for the toy app.</span>
</div>

<div class="code"><div class="highlight"><pre><span class="n">source</span> <span class="s1">'https://rubygems.org'</span>

<span class="n">gem</span> <span class="s1">'rails'</span><span class="p">,</span>        <span class="s1">'4.2.2'</span>
<span class="n">gem</span> <span class="s1">'sass-rails'</span><span class="p">,</span>   <span class="s1">'5.0.2'</span>
<span class="n">gem</span> <span class="s1">'uglifier'</span><span class="p">,</span>     <span class="s1">'2.5.3'</span>
<span class="n">gem</span> <span class="s1">'coffee-rails'</span><span class="p">,</span> <span class="s1">'4.1.0'</span>
<span class="n">gem</span> <span class="s1">'jquery-rails'</span><span class="p">,</span> <span class="s1">'4.0.3'</span>
<span class="n">gem</span> <span class="s1">'turbolinks'</span><span class="p">,</span>   <span class="s1">'2.3.0'</span>
<span class="n">gem</span> <span class="s1">'jbuilder'</span><span class="p">,</span>     <span class="s1">'2.2.3'</span>
<span class="n">gem</span> <span class="s1">'sdoc'</span><span class="p">,</span>         <span class="s1">'0.4.0'</span><span class="p">,</span> <span class="ss">group</span><span class="p">:</span> <span class="ss">:doc</span>

<span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">'sqlite3'</span><span class="p">,</span>     <span class="s1">'1.3.9'</span>
  <span class="n">gem</span> <span class="s1">'byebug'</span><span class="p">,</span>      <span class="s1">'3.4.0'</span>
  <span class="n">gem</span> <span class="s1">'web-console'</span><span class="p">,</span> <span class="s1">'2.0.0.beta3'</span>
  <span class="n">gem</span> <span class="s1">'spring'</span><span class="p">,</span>      <span class="s1">'1.1.3'</span>
<span class="k">end</span>

<span class="n">group</span> <span class="ss">:production</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">'pg'</span><span class="p">,</span>             <span class="s1">'0.17.1'</span>
  <span class="n">gem</span> <span class="s1">'rails_12factor'</span><span class="p">,</span> <span class="s1">'0.0.2'</span>
<span class="k">end</span>
</pre></div></div></div><p>Note that <a href="toy_app_fragment.html#code-demo_gemfile_sqlite_version_redux" class="hyperref">Listing <span class="ref">2.1</span></a> is identical to <a href="beginning_fragment.html#code-gemfile_pg_gem" class="hyperref">Listing <span class="ref">1.14</span></a>.</p>
<p>As in <a href="beginning_fragment.html#sec-heroku_setup" class="hyperref">Section <span class="ref">1.5.1</span></a>, we’ll install the local gems while suppressing the installation of production gems using the <span class="inline_verbatim">--without production</span> option:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle install --without production
</pre></div></div>
<p>Finally, we’ll put the toy app under version control with Git:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git init
<span class="gp">$</span> git add -A
<span class="gp">$</span> git commit -m <span class="s2">"Initialize repository"</span>
</pre></div></div>
<p>You should also <a href="https://bitbucket.org/repo/create" target="_blank">create a new repository</a> by clicking on the “Create” button at Bitbucket (<a href="toy_app_fragment.html#fig-create_demo_repository" class="hyperref">Figure <span class="ref">2.1</span></a>), and then push up to the remote repository:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git remote add origin git@bitbucket.org:&lt;username&gt;/toy_app.git
<span class="gp">$</span> git push -u origin --all <span class="c"># pushes up the repo and its refs for the first time</span>
</pre></div></div>
<div class="center figure" id="fig-create_demo_repository" data-tralics-id="uid121" data-number="2.1">
<div class="graphics image"><img src="images/figures/create_demo_repo_bitbucket.png" alt="images/figures/create_demo_repo_bitbucket"></div><div class="caption"><span class="header">Figure 2.1: </span><span class="description">Creating the toy app repository at Bitbucket.
</span></div></div>
<p>Finally, it’s never too early to deploy, which I suggest doing by following the same “hello, world!” steps in <a href="beginning_fragment.html#code-hello_action" class="hyperref">Listing <span class="ref">1.8</span></a> and <a href="beginning_fragment.html#code-default_root_route" class="hyperref">Listing <span class="ref">1.9</span></a>.<sup id="cha-2_footnote-ref-1" class="footnote"><a href="#cha-2_footnote-1">1</a></sup><span class="intersentencespace"></span> Then commit the changes and push up to Heroku:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git commit -am <span class="s2">"Add hello"</span>
<span class="gp">$</span> heroku create
<span class="gp">$</span> git push heroku master
</pre></div></div>
<p>(As in <a href="beginning_fragment.html#sec-deploying" class="hyperref">Section <span class="ref">1.5</span></a>, you may see some warning messages, which you should ignore for now.<span class="intersentencespace"></span> We’ll eliminate them in <a href="sign_up_fragment.html#sec-professional_grade_deployment" class="hyperref">Section <span class="ref">7.5</span></a>.)<span class="intersentencespace"></span> Apart from the address of the Heroku app, the result should be the same as in <a href="beginning_fragment.html#fig-heroku_app" class="hyperref">Figure <span class="ref">1.18</span></a>.</p>
<p>Now we’re ready to start making the app itself.<span class="intersentencespace"></span> The typical first step when making a web application is to create a <em>data model</em>, which is a representation of the structures needed by our application.<span class="intersentencespace"></span> In our case, the toy app will be a microblog, with only users and short (micro)posts.<span class="intersentencespace"></span> Thus, we’ll begin with a model for <em>users</em> of the app (<a href="toy_app_fragment.html#sec-modeling_demo_users" class="hyperref">Section <span class="ref">2.1.1</span></a>), and then we’ll add a model for <em>microposts</em> (<a href="toy_app_fragment.html#sec-modeling_demo_microposts" class="hyperref">Section <span class="ref">2.1.2</span></a>).</p>
<div id="sec-modeling_demo_users" data-tralics-id="uid123" class="subsection" data-number="2.1.1"><h3><a href="toy_app_fragment.html#sec-modeling_demo_users" class="heading hyperref"><span class="number">2.1.1 </span>A toy model for users</a></h3>
<p>There are as many choices for a user data model as there are different registration forms on the web; we’ll go with a distinctly minimalist approach.<span class="intersentencespace"></span> Users of our toy app will have a unique <code>integer</code> identifier called <code>id</code>, a publicly viewable <code>name</code> (of type <code>string</code>), and an <code>email</code> address (also a <code>string</code>) that will double as a username.<span class="intersentencespace"></span> A summary of the data model for users appears in <a href="toy_app_fragment.html#fig-demo_user_model" class="hyperref">Figure <span class="ref">2.2</span></a>.</p>
<div class="center figure" id="fig-demo_user_model" data-tralics-id="uid124" data-number="2.2"><span class="graphics"><img src="images/figures/demo_user_model.png" alt="demo_user_model"></span>
<div class="caption"><span class="header">Figure 2.2: </span><span class="description">The data model for users.
</span></div></div>
<p>As we’ll see starting in <a href="modeling_users_fragment.html#sec-database_migrations" class="hyperref">Section <span class="ref">6.1.1</span></a>, the label <code>users</code> in <a href="toy_app_fragment.html#fig-demo_user_model" class="hyperref">Figure <span class="ref">2.2</span></a> corresponds to a <em>table</em> in a database, and the <code>id</code>, <code>name</code>, and <code>email</code> attributes are <em>columns</em> in that table.</p>
</div>
<div id="sec-modeling_demo_microposts" data-tralics-id="uid125" class="subsection" data-number="2.1.2"><h3><a href="toy_app_fragment.html#sec-modeling_demo_microposts" class="heading hyperref"><span class="number">2.1.2 </span>A toy model for microposts</a></h3>
<p>The core of the micropost data model is even simpler than the one for users: a micropost has only an <code>id</code> and a <code>content</code> field for the micropost’s text (of type <code>text</code>).<sup id="cha-2_footnote-ref-2" class="footnote"><a href="#cha-2_footnote-2">2</a></sup><span class="intersentencespace"></span> There’s an additional complication, though: we want to <em>associate</em> each micropost with a particular user.<span class="intersentencespace"></span> We’ll accomplish this by recording the <code>user_id</code> of the owner of the post.<span class="intersentencespace"></span> The results are shown in <a href="toy_app_fragment.html#fig-demo_micropost_model" class="hyperref">Figure <span class="ref">2.3</span></a>.</p>
<div class="center figure" id="fig-demo_micropost_model" data-tralics-id="uid127" data-number="2.3"><span class="graphics"><img src="images/figures/demo_micropost_model.png" alt="demo_micropost_model"></span>
<div class="caption"><span class="header">Figure 2.3: </span><span class="description">The data model for microposts.
</span></div></div>
<p>We’ll see in <a href="toy_app_fragment.html#sec-demo_user_has_many_microposts" class="hyperref">Section <span class="ref">2.3.3</span></a> (and more fully in <a href="user_microposts_fragment.html#cha-user_microposts" class="hyperref">Chapter <span class="ref">11</span></a>) how this <code>user_id</code> attribute allows us to succinctly express the notion that a user potentially has many associated microposts.</p>
</div></div><div id="sec-demo_users_resource" data-tralics-id="cid11" class="section" data-number="2.2"><h2><a href="toy_app_fragment.html#sec-demo_users_resource" class="heading hyperref"><span class="number">2.2 </span>The Users resource</a></h2>
<p>In this section, we’ll implement the users data model in <a href="toy_app_fragment.html#sec-modeling_demo_users" class="hyperref">Section <span class="ref">2.1.1</span></a>, along with a web interface to that model.<span class="intersentencespace"></span> The combination will constitute a <em>Users resource</em>, which will allow us to think of users as objects that can be created, read, updated, and deleted through the web via the <a href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol" target="_blank">HTTP protocol</a>.<span class="intersentencespace"></span> As promised in the introduction, our Users resource will be created by a scaffold generator program, which comes standard with each Rails project.<span class="intersentencespace"></span> I urge you not to look too closely at the generated code; at this stage, it will only serve to confuse you.</p>
<p>Rails scaffolding is generated by passing the <code>scaffold</code> command to the <code>rails generate</code> script.<span class="intersentencespace"></span> The argument of the <code>scaffold</code> command is the singular version of the resource name (in this case, <code>User</code>), together with optional parameters for the data model’s attributes:<sup id="cha-2_footnote-ref-3" class="footnote"><a href="#cha-2_footnote-3">3</a></sup></p>
<div class="code"><div class="highlight"><pre><span class="hll">$ rails generate scaffold User name:string email:string
</span>      invoke  active_record
      create    db/migrate/20140821011110_create_users.rb
      create    app/models/user.rb
      invoke    test_unit
      create      test/models/user_test.rb
      create      test/fixtures/users.yml
      invoke  resource_route
       route    resources :users
      invoke  scaffold_controller
      create    app/controllers/users_controller.rb
      invoke    erb
      create      app/views/users
      create      app/views/users/index.html.erb
      create      app/views/users/edit.html.erb
      create      app/views/users/show.html.erb
      create      app/views/users/new.html.erb
      create      app/views/users/_form.html.erb
      invoke    test_unit
      create      test/controllers/users_controller_test.rb
      invoke    helper
      create      app/helpers/users_helper.rb
      invoke      test_unit
      create        test/helpers/users_helper_test.rb
      invoke    jbuilder
      create      app/views/users/index.json.jbuilder
      create      app/views/users/show.json.jbuilder
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/users.js.coffee
      invoke    scss
      create      app/assets/stylesheets/users.css.scss
      invoke  scss
      create    app/assets/stylesheets/scaffolds.css.scss
</pre></div></div>
<p>By including <code>name:string</code> and <code>email:string</code>, we have arranged for the User model to have the form shown in <a href="toy_app_fragment.html#fig-demo_user_model" class="hyperref">Figure <span class="ref">2.2</span></a>.<span class="intersentencespace"></span> (Note that there is no need to include a parameter for <code>id</code>; it is created automatically by Rails for use as the <em>primary key</em> in the database.)</p>
<p>To proceed with the toy application, we first need to <em>migrate</em> the database using <em>Rake</em> (<a href="toy_app_fragment.html#aside-rake" class="hyperref">Box <span class="ref">2.1</span></a>):</p>
<div class="code"><div class="highlight"><pre><span class="hll">$ bundle exec rake db:migrate
</span>==  CreateUsers: migrating ====================================================
-- create_table(:users)
   -&gt; 0.0017s
==  CreateUsers: migrated (0.0018s) ===========================================
</pre></div></div>
<p>This simply updates the database with our new <code>users</code> data model.<span class="intersentencespace"></span> (We’ll learn more about database migrations starting in <a href="modeling_users_fragment.html#sec-database_migrations" class="hyperref">Section <span class="ref">6.1.1</span></a>.)<span class="intersentencespace"></span> Note that, in order to ensure that the command uses the version of Rake corresponding to our <code>Gemfile</code>, we need to run <code>rake</code> using <code>bundle exec</code>.<span class="intersentencespace"></span> On many systems, including the cloud IDE, you can omit <code>bundle exec</code>, but it is necessary on some systems, so I’ll include it for completeness.</p>
<p>With that, we can run the local web server in a separate tab (<a href="beginning_fragment.html#fig-rails_server_new_tab" class="hyperref">Figure <span class="ref">1.7</span></a>) as follows:<sup id="cha-2_footnote-ref-4" class="footnote"><a href="#cha-2_footnote-4">4</a></sup></p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails server -b <span class="nv">$IP</span> -p <span class="nv">$PORT</span>    <span class="c"># Use only `rails server` if running locally</span>
</pre></div></div>
<p>Now the toy application should be available on the local server as described in <a href="beginning_fragment.html#sec-rails_server" class="hyperref">Section <span class="ref">1.3.2</span></a>.<span class="intersentencespace"></span> (If you’re using the cloud IDE, be sure to open the resulting development server in a new <em>browser</em> tab, not inside the IDE itself.)</p>
<div class="aside" id="aside-rake" data-tralics-id="uid130" data-number="2.1"><div class="heading"><span class="number">Box 2.1.</span> 

<span class="description">Rake</span></div>
<p>In the Unix tradition, the <a href="http://en.wikipedia.org/wiki/Make_(software)" target="_blank"><em>make</em></a> utility has played an important role in building executable programs from source code; many a computer hacker has committed to muscle memory the line</p>
<pre>  $ ./configure &amp;&amp; make &amp;&amp; sudo make install</pre>
<p>commonly used to compile code on Unix systems (including Linux and Mac OS X).</p>
<p>Rake is <em>Ruby make</em>, a make-like language written in Ruby.<span class="intersentencespace"></span> Rails uses Rake extensively, especially for the innumerable little administrative tasks necessary when developing database-backed web applications.<span class="intersentencespace"></span> The <code>rake db:migrate</code> command is probably the most common, but there are many others; you can see a list of database tasks using <code>-T db</code>:</p>
<pre>  $ bundle exec rake -T db</pre>
<p>To see all the Rake tasks available, run</p>
<pre>  $ bundle exec rake -T</pre>
<p>The list is likely to be overwhelming, but don’t worry, you don’t have to know all (or even most) of these commands.<span class="intersentencespace"></span> By the end of the <em>Rails Tutorial</em>, you’ll know all the most important ones.</p>

</div>
<div id="sec-a_user_tour" data-tralics-id="uid131" class="subsection" data-number="2.2.1"><h3><a href="toy_app_fragment.html#sec-a_user_tour" class="heading hyperref"><span class="number">2.2.1 </span>A user tour</a></h3>
<p>If we visit the root URL at / (read “slash”, as noted in <a href="beginning_fragment.html#sec-hello_world" class="hyperref">Section <span class="ref">1.3.4</span></a>), we get the same default Rails page shown in <a href="beginning_fragment.html#fig-riding_rails" class="hyperref">Figure <span class="ref">1.9</span></a>, but in generating the Users resource scaffolding we have also created a large number of pages for manipulating users.<span class="intersentencespace"></span> For example, the page for listing all users is at <a href="http://localhost:3000/users" target="_blank">/users</a>, and the
page for making a new user is at <a href="http://localhost:3000/users/new" target="_blank">/users/new</a>.<span class="intersentencespace"></span> The rest of this section is dedicated to taking a whirlwind tour through these user pages.<span class="intersentencespace"></span> As we proceed, it may help to refer to <a href="toy_app_fragment.html#table-user_urls" class="hyperref">Table <span class="ref">2.1</span></a>, which shows the correspondence between pages and URLs.</p>
<div class="table" id="table-user_urls" data-tralics-id="uid132" data-number="2.1"><table class="tabular">
<tbody><tr class="bottom_border"><td class="align_left"><strong>URL</strong></td>
<td class="align_left"><strong>Action</strong></td>
<td class="align_left"><strong>Purpose</strong></td>
</tr><tr><td class="align_left"><a href="http://localhost:3000/users" target="_blank">/users</a></td>
<td class="align_left"><code>index</code></td>
<td class="align_left">page to list all users</td>
</tr><tr><td class="align_left"><a href="http://localhost:3000/users/1" target="_blank">/users/1</a></td>
<td class="align_left"><code>show</code></td>
<td class="align_left">page to show user with id <code>1</code></td>
</tr><tr><td class="align_left"><a href="http://localhost:3000/users/new" target="_blank">/users/new</a></td>
<td class="align_left"><code>new</code></td>
<td class="align_left">page to make a new user</td>
</tr><tr><td class="align_left"><a href="http://localhost:3000/users/1/edit" target="_blank">/users/1/edit</a></td>
<td class="align_left"><code>edit</code></td>
<td class="align_left">page to edit user with id <code>1</code></td>
</tr></tbody></table><div class="caption"><span class="header">Table 2.1: </span><span class="description">The correspondence between pages and URLs for the Users resource.
</span></div></div>
<p>We start with the page to show all the users in our application, called <a href="http://localhost:3000/users" target="_blank"><span class="tt">index</span></a>; as you might expect, initially there are no users at all (<a href="toy_app_fragment.html#fig-demo_blank_user_index_rails_3" class="hyperref">Figure <span class="ref">2.4</span></a>).</p>
<div class="center figure" id="fig-demo_blank_user_index_rails_3" data-tralics-id="uid133" data-number="2.4">
<div class="graphics image"><img src="images/figures/demo_blank_user_index_3rd_edition.png" alt="images/figures/demo_blank_user_index_3rd_edition"></div><div class="caption"><span class="header">Figure 2.4: </span><span class="description">The initial index page for the Users resource (<a href="http://localhost:3000/users" target="_blank">/users</a>).
</span></div></div>
<p>To make a new user, we visit the <a href="http://localhost:3000/users/new" target="_blank"><span class="tt">new</span></a> page, as shown in <a href="toy_app_fragment.html#fig-demo_new_user_rails_3" class="hyperref">Figure <span class="ref">2.5</span></a>.<span class="intersentencespace"></span> (Since the http://0.0.0.0:3000 or cloud IDE part of the address is implicit whenever we are developing locally, I’ll omit it from now on.)<span class="intersentencespace"></span> In <a href="sign_up_fragment.html#cha-sign_up" class="hyperref">Chapter <span class="ref">7</span></a>, this will become the user signup page.</p>
<div class="center figure" id="fig-demo_new_user_rails_3" data-tralics-id="uid134" data-number="2.5">
<div class="graphics image"><img src="images/figures/demo_new_user_3rd_edition.png" alt="images/figures/demo_new_user_3rd_edition"></div><div class="caption"><span class="header">Figure 2.5: </span><span class="description">The new user page (<a href="http://localhost:3000/users/new" target="_blank">/users/new</a>).
</span></div></div>
<p>We can create a user by entering name and email values in the text fields and then clicking the Create User button.<span class="intersentencespace"></span> The result is the user <a href="http://localhost:3000/users/1" target="_blank"><span class="tt">show</span></a> page, as seen in <a href="toy_app_fragment.html#fig-demo_show_user_rails_3" class="hyperref">Figure <span class="ref">2.6</span></a>.<span class="intersentencespace"></span> (The green welcome message is accomplished using the <em>flash</em>, which we’ll learn about in <a href="sign_up_fragment.html#sec-the_flash" class="hyperref">Section <span class="ref">7.4.2</span></a>.)<span class="intersentencespace"></span> Note that the URL is <a href="http://localhost:3000/users/1" target="_blank">/users/1</a>; as you might suspect, the number <code>1</code> is simply the user’s <code>id</code> attribute from <a href="toy_app_fragment.html#fig-demo_user_model" class="hyperref">Figure <span class="ref">2.2</span></a>.<span class="intersentencespace"></span> In <a href="sign_up_fragment.html#sec-showing_users" class="hyperref">Section <span class="ref">7.1</span></a>, this page will become the user’s profile.</p>
<div class="center figure" id="fig-demo_show_user_rails_3" data-tralics-id="uid135" data-number="2.6">
<div class="graphics image"><img src="images/figures/demo_show_user_3rd_edition.png" alt="images/figures/demo_show_user_3rd_edition"></div><div class="caption"><span class="header">Figure 2.6: </span><span class="description">The page to show a user (<a href="http://localhost:3000/users/1" target="_blank">/users/1</a>).
</span></div></div>
<p>To change a user’s information, we visit the <a href="http://localhost:3000/users/1/edit" target="_blank"><span class="tt">edit</span></a> page (<a href="toy_app_fragment.html#fig-demo_edit_user_rails_3" class="hyperref">Figure <span class="ref">2.7</span></a>).<span class="intersentencespace"></span> By modifying the user information and clicking the Update User button, we arrange to change the information for the user in the toy application (<a href="toy_app_fragment.html#fig-demo_update_user_rails_3" class="hyperref">Figure <span class="ref">2.8</span></a>).<span class="intersentencespace"></span> (As we’ll see in detail starting in <a href="modeling_users_fragment.html#cha-modeling_users" class="hyperref">Chapter <span class="ref">6</span></a>, this user data is stored in a database back-end.)<span class="intersentencespace"></span> We’ll add user edit/update functionality to the sample application in <a href="updating_and_deleting_users_fragment.html#sec-updating_users" class="hyperref">Section <span class="ref">9.1</span></a>.</p>
<div class="center figure" id="fig-demo_edit_user_rails_3" data-tralics-id="uid136" data-number="2.7">
<div class="graphics image"><img src="images/figures/demo_edit_user_3rd_edition.png" alt="images/figures/demo_edit_user_3rd_edition"></div><div class="caption"><span class="header">Figure 2.7: </span><span class="description">The user edit page (<a href="http://localhost:3000/users/1/edit" target="_blank">/users/1/edit</a>).
</span></div></div>
<div class="center figure" id="fig-demo_update_user_rails_3" data-tralics-id="uid137" data-number="2.8">
<div class="graphics image"><img src="images/figures/demo_update_user_3rd_edition.png" alt="images/figures/demo_update_user_3rd_edition"></div><div class="caption"><span class="header">Figure 2.8: </span><span class="description">A user with updated information.
</span></div></div>
<p>Now we’ll create a second user by revisiting the <a href="http://localhost:3000/users/new" target="_blank"><span class="tt">new</span></a> page and submitting a second set of user information; the resulting user <a href="http://localhost:3000/users" target="_blank"><span class="tt">index</span></a> is shown in <a href="toy_app_fragment.html#fig-demo_user_index_two_rails_3" class="hyperref">Figure <span class="ref">2.9</span></a>.<span class="intersentencespace"></span> <a href="sign_up_fragment.html#sec-showing_users" class="hyperref">Section <span class="ref">7.1</span></a> will develop the user index into a more polished page for showing all users.</p>
<div class="center figure" id="fig-demo_user_index_two_rails_3" data-tralics-id="uid138" data-number="2.9">
<div class="graphics image"><img src="images/figures/demo_user_index_two_3rd_edition.png" alt="images/figures/demo_user_index_two_3rd_edition"></div><div class="caption"><span class="header">Figure 2.9: </span><span class="description">The user index page (<a href="http://localhost:3000/users" target="_blank">/users</a>) with a second user.
</span></div></div>
<p>Having shown how to create, show, and edit users, we come finally to destroying them (<a href="toy_app_fragment.html#fig-demo_destroy_user" class="hyperref">Figure <span class="ref">2.10</span></a>).<span class="intersentencespace"></span> You should verify that clicking on the link in <a href="toy_app_fragment.html#fig-demo_destroy_user" class="hyperref">Figure <span class="ref">2.10</span></a> destroys the second user, yielding an index page with only one user.<span class="intersentencespace"></span> (If it doesn’t work, be sure that JavaScript is enabled in your browser; Rails uses JavaScript to issue the request needed to destroy a user.)<span class="intersentencespace"></span> <a href="updating_and_deleting_users_fragment.html#sec-deleting_users" class="hyperref">Section <span class="ref">9.4</span></a> adds user deletion to the sample app, taking care to restrict its use to a special class of administrative users.</p>
<div class="center figure" id="fig-demo_destroy_user" data-tralics-id="uid139" data-number="2.10">
<div class="graphics image"><img src="images/figures/demo_destroy_user_3rd_edition.png" alt="images/figures/demo_destroy_user_3rd_edition"></div><div class="caption"><span class="header">Figure 2.10: </span><span class="description">Destroying a user.
</span></div></div>
</div>
<div id="sec-mvc_in_action" data-tralics-id="uid140" class="subsection" data-number="2.2.2"><h3><a href="toy_app_fragment.html#sec-mvc_in_action" class="heading hyperref"><span class="number">2.2.2 </span>MVC in action</a></h3>
<p>Now that we’ve completed a quick overview of the Users resource, let’s examine one particular part of it in the context of the Model-View-Controller (MVC) pattern introduced in <a href="beginning_fragment.html#sec-mvc" class="hyperref">Section <span class="ref">1.3.3</span></a>.<span class="intersentencespace"></span> Our strategy will be to describe the results of a typical browser hit—a visit to the user index page at <a href="http://localhost:3000/users" target="_blank">/users</a>—in terms of MVC (<a href="toy_app_fragment.html#fig-mvc_detailed" class="hyperref">Figure <span class="ref">2.11</span></a>).</p>
<div class="center figure" id="fig-mvc_detailed" data-tralics-id="uid141" data-number="2.11">
<div class="graphics image"><img src="images/figures/mvc_detailed.png" alt="images/figures/mvc_detailed"></div><div class="caption"><span class="header">Figure 2.11: </span><span class="description">A detailed diagram of MVC in Rails.
</span></div></div>
<p>Here is a summary of the steps shown in <a href="toy_app_fragment.html#fig-mvc_detailed" class="hyperref">Figure <span class="ref">2.11</span></a>:</p>
<ol>
<li>The browser issues a request for the /users URL.
</li>
<li>Rails routes /users to the <code>index</code> action in the Users controller.<span class="intersentencespace"></span>
</li>
<li>The <code>index</code> action asks the User model to retrieve all users (<code>User.all</code>).<span class="intersentencespace"></span>
</li>
<li>The User model pulls all the users from the database.<span class="intersentencespace"></span>
</li>
<li>The User model returns the list of users to the controller.<span class="intersentencespace"></span>
</li>
<li>The controller captures the users in the <code>@users</code> variable, which is passed to the <code>index</code> view.<span class="intersentencespace"></span>
</li>
<li>The view uses embedded Ruby to render the page as HTML.
</li>
<li>The controller passes the HTML back to the browser.<sup id="cha-2_footnote-ref-5" class="footnote"><a href="#cha-2_footnote-5">5</a></sup>
</li></ol>
<p>Now let’s take a look at the above steps in more detail.<span class="intersentencespace"></span> We start with a request issued from the browser—i.e., the result of typing a URL in the address bar or clicking on a link (Step 1 in <a href="toy_app_fragment.html#fig-mvc_detailed" class="hyperref">Figure <span class="ref">2.11</span></a>).<span class="intersentencespace"></span> This request hits the <em>Rails router</em> (Step 2), which dispatches to the proper <em>controller action</em> based on the URL (and, as we’ll see in <a href="static_pages_fragment.html#aside-get_etc" class="hyperref">Box <span class="ref">3.2</span></a>, the type of request).<span class="intersentencespace"></span> The code to create the mapping of user URLs to controller actions for the Users resource appears in <a href="toy_app_fragment.html#code-rails_routes" class="hyperref">Listing <span class="ref">2.2</span></a>; this code effectively sets up the table of URL/action pairs seen in <a href="toy_app_fragment.html#table-user_urls" class="hyperref">Table <span class="ref">2.1</span></a>.<span class="intersentencespace"></span> (The strange notation <code>:users</code> is a <em>symbol</em>, which we’ll learn about in <a href="rails_flavored_ruby_fragment.html#sec-hashes_and_symbols" class="hyperref">Section <span class="ref">4.3.3</span></a>.)</p>
<div class="codelisting" id="code-rails_routes" data-tralics-id="uid151" data-number="2.2"><div class="heading"><span class="number">Listing 2.2:</span> 

<span class="description">The Rails routes, with a rule for the Users resource.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">config/routes.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
<span class="hll">  <span class="n">resources</span> <span class="ss">:users</span>
</span>  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div></div></div><p>While we’re looking at the routes file, let’s take a moment to associate the root route with the users index, so that “slash” goes to /users.<span class="intersentencespace"></span> Recall from <a href="beginning_fragment.html#code-hello_root_route" class="hyperref">Listing <span class="ref">1.10</span></a> that we changed</p>
<div class="code"><div class="highlight"><pre><span class="c1"># root 'welcome#index'</span>
</pre></div></div>
<p>to read</p>
<div class="code"><div class="highlight"><pre><span class="n">root</span> <span class="s1">'application#hello'</span>
</pre></div></div>
<p>so that the root route went to the <code>hello</code> action in the Application controller.<span class="intersentencespace"></span> In the present case, we want to use the <code>index</code> action in the Users controller, which we can arrange using the code shown in <a href="toy_app_fragment.html#code-rails_routes_root_route" class="hyperref">Listing <span class="ref">2.3</span></a>.<span class="intersentencespace"></span> (At this point, I also recommend removing the <code>hello</code> action from the Application controller if you added it at the beginning of this section.)</p>
<div class="codelisting" id="code-rails_routes_root_route" data-tralics-id="uid152" data-number="2.3"><div class="heading"><span class="number">Listing 2.3:</span> 

<span class="description">Adding a root route for users.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">config/routes.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
  <span class="n">resources</span> <span class="ss">:users</span>
<span class="hll">  <span class="n">root</span> <span class="s1">'users#index'</span>
</span>  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div></div></div><p>The pages from the tour in <a href="toy_app_fragment.html#sec-a_user_tour" class="hyperref">Section <span class="ref">2.2.1</span></a> correspond to <em>actions</em> in the Users <em>controller</em>, which is a collection of related actions.<span class="intersentencespace"></span> The controller generated by the scaffolding is shown schematically in <a href="toy_app_fragment.html#code-demo_users_controller" class="hyperref">Listing <span class="ref">2.4</span></a>.<span class="intersentencespace"></span> Note the notation <code>class UsersController &lt; ApplicationController</code>, which is an example of a Ruby <em>class</em> with <em>inheritance</em>.<span class="intersentencespace"></span> (We’ll discuss inheritance briefly in <a href="toy_app_fragment.html#sec-inheritance_hierarchies" class="hyperref">Section <span class="ref">2.3.4</span></a> and cover both subjects in more detail in <a href="rails_flavored_ruby_fragment.html#sec-ruby_classes" class="hyperref">Section <span class="ref">4.4</span></a>.)</p>
<div class="codelisting" id="code-demo_users_controller" data-tralics-id="uid153" data-number="2.4"><div class="heading"><span class="number">Listing 2.4:</span> 

<span class="description">The Users controller in schematic form.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/controllers/users_controller.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">index</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">show</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">new</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">edit</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">create</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">update</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">destroy</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div></div></div><p>You may notice that there are more actions than there are pages; the <code>index</code>, <code>show</code>, <code>new</code>, and <code>edit</code> actions all correspond to pages from <a href="toy_app_fragment.html#sec-a_user_tour" class="hyperref">Section <span class="ref">2.2.1</span></a>, but there are additional <code>create</code>, <code>update</code>, and <code>destroy</code> actions as well.<span class="intersentencespace"></span> These actions don’t typically render pages (although they can); instead, their main purpose is to modify information about users in the database.<span class="intersentencespace"></span> This full suite of controller actions, summarized in <a href="toy_app_fragment.html#table-demo_RESTful_users" class="hyperref">Table <span class="ref">2.2</span></a>, represents the implementation of the REST architecture in Rails (<a href="toy_app_fragment.html#aside-REST" class="hyperref">Box <span class="ref">2.2</span></a>), which is based on the ideas of <em>representational state transfer</em> identified and named by computer scientist <a href="http://en.wikipedia.org/wiki/Roy_Fielding" target="_blank">Roy Fielding</a>.<sup id="cha-2_footnote-ref-6" class="footnote"><a href="#cha-2_footnote-6">6</a></sup><span class="intersentencespace"></span> Note from <a href="toy_app_fragment.html#table-demo_RESTful_users" class="hyperref">Table <span class="ref">2.2</span></a> that there is some overlap in the URLs; for example, both the user <code>show</code> action and the <code>update</code> action correspond to the URL /users/1.<span class="intersentencespace"></span> The difference between them is the <a href="http://en.wikipedia.org/wiki/HTTP_request#Request_methods" target="_blank">HTTP request method</a> they respond to.<span class="intersentencespace"></span> We’ll learn more about HTTP request methods starting in <a href="static_pages_fragment.html#sec-getting_started_with_testing" class="hyperref">Section <span class="ref">3.3</span></a>.</p>
<div class="table" id="table-demo_RESTful_users" data-tralics-id="uid155" data-number="2.2"><table class="tabular">
<tbody><tr class="bottom_border"><td class="align_left"><strong>HTTP request</strong></td>
<td class="align_left"><strong>URL</strong></td>
<td class="align_left"><strong>Action</strong></td>
<td class="align_left"><strong>Purpose</strong></td>
</tr><tr><td class="align_left"><span class="tt">GET</span></td>
<td class="align_left">/users</td>
<td class="align_left"><code>index</code></td>
<td class="align_left">page to list all users</td>
</tr><tr><td class="align_left"><span class="tt">GET</span></td>
<td class="align_left">/users/1</td>
<td class="align_left"><code>show</code></td>
<td class="align_left">page to show user with id <code>1</code></td>
</tr><tr><td class="align_left"><span class="tt">GET</span></td>
<td class="align_left">/users/new</td>
<td class="align_left"><code>new</code></td>
<td class="align_left">page to make a new user</td>
</tr><tr><td class="align_left"><span class="tt">POST</span></td>
<td class="align_left">/users</td>
<td class="align_left"><code>create</code></td>
<td class="align_left">create a new user</td>
</tr><tr><td class="align_left"><span class="tt">GET</span></td>
<td class="align_left">/users/1/edit</td>
<td class="align_left"><code>edit</code></td>
<td class="align_left">page to edit user with id <code>1</code></td>
</tr><tr><td class="align_left"><span class="tt">PATCH</span></td>
<td class="align_left">/users/1</td>
<td class="align_left"><code>update</code></td>
<td class="align_left">update user with id <code>1</code></td>
</tr><tr><td class="align_left"><span class="tt">DELETE</span></td>
<td class="align_left">/users/1</td>
<td class="align_left"><code>destroy</code></td>
<td class="align_left">delete user with id <code>1</code></td>
</tr></tbody></table><div class="caption"><span class="header">Table 2.2: </span><span class="description">RESTful routes provided by the Users resource in <a href="toy_app_fragment.html#code-rails_routes" class="hyperref">Listing <span class="ref">2.2</span></a>.
</span></div></div>
<div class="aside" id="aside-REST" data-tralics-id="uid156" data-number="2.2"><div class="heading"><span class="number">Box 2.2.</span> 

<span class="description">REpresentational State Transfer (REST)</span></div>
<p>If you read much about Ruby on Rails web development, you’ll see a lot of references to “REST”, which is an acronym for REpresentational State Transfer.<span class="intersentencespace"></span> REST is an architectural style for developing distributed, networked systems and software applications such as the World Wide Web and web applications.<span class="intersentencespace"></span> Although REST theory is rather abstract, in the context of Rails applications REST means that most application components (such as users and microposts) are modeled as <em>resources</em> that can be created, read, updated, and deleted—operations that correspond both to the <a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete" target="_blank">CRUD operations of relational databases</a> and to the four fundamental <a href="http://en.wikipedia.org/wiki/HTTP_request#Request_methods" target="_blank">HTTP request methods</a>: <span class="tt">POST</span>, <span class="tt">GET</span>, <span class="tt">PATCH</span>, and <span class="tt">DELETE</span>.<sup id="cha-2_footnote-ref-7" class="footnote"><a href="#cha-2_footnote-7">7</a></sup><span class="intersentencespace"></span> (We’ll learn more about HTTP requests in <a href="static_pages_fragment.html#sec-getting_started_with_testing" class="hyperref">Section <span class="ref">3.3</span></a> and especially <a href="static_pages_fragment.html#aside-get_etc" class="hyperref">Box <span class="ref">3.2</span></a>.)</p>
<p>As a Rails application developer, the RESTful style of development helps you make choices about which controllers and actions to write: you simply structure the application using resources that get created, read, updated, and deleted.<span class="intersentencespace"></span> In the case of users and microposts, this process is straightforward, since they are naturally resources in their own right.<span class="intersentencespace"></span> In <a href="following_users_fragment.html#cha-following_users" class="hyperref">Chapter <span class="ref">12</span></a>, we’ll see an example where REST principles allow us to model a subtler problem, “following users”, in a natural and convenient way.</p>

</div><p>To examine the relationship between the Users controller and the User model, let’s focus on a simplified version of the <code>index</code> action, shown in <a href="toy_app_fragment.html#code-demo_index_action" class="hyperref">Listing <span class="ref">2.5</span></a>.<span class="intersentencespace"></span> (The scaffold code is ugly and confusing, so I’ve suppressed it.)</p>
<div class="codelisting" id="code-demo_index_action" data-tralics-id="uid158" data-number="2.5"><div class="heading"><span class="number">Listing 2.5:</span> 

<span class="description">The simplified user <code>index</code> action for the toy application.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/controllers/users_controller.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">index</span>
<span class="hll">    <span class="vi">@users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">all</span>
</span>  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div></div></div><p>This <code>index</code> action has the line <code>@users = User.all</code> (Step 3 in <a href="toy_app_fragment.html#fig-mvc_detailed" class="hyperref">Figure <span class="ref">2.11</span></a>), which asks the User model to retrieve a list of all the users from the database (Step 4), and then places them in the variable <code>@users</code> (pronounced “at-users”) (Step 5).<span class="intersentencespace"></span> The User model itself appears in <a href="toy_app_fragment.html#code-demo_user_model" class="hyperref">Listing <span class="ref">2.6</span></a>; although it is rather plain, it comes equipped with a large amount of functionality because of inheritance (<a href="toy_app_fragment.html#sec-inheritance_hierarchies" class="hyperref">Section <span class="ref">2.3.4</span></a> and <a href="rails_flavored_ruby_fragment.html#sec-ruby_classes" class="hyperref">Section <span class="ref">4.4</span></a>).<span class="intersentencespace"></span> In particular, by using the Rails library called <em>Active Record</em>, the code in <a href="toy_app_fragment.html#code-demo_user_model" class="hyperref">Listing <span class="ref">2.6</span></a> arranges for <code>User.all</code> to return all the users in the database.</p>
<div class="codelisting" id="code-demo_user_model" data-tralics-id="uid159" data-number="2.6"><div class="heading"><span class="number">Listing 2.6:</span> 

<span class="description">The User model for the toy application.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/models/user.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
<span class="k">end</span>
</pre></div></div></div><p>Once the <code>@users</code> variable is defined, the controller calls the <em>view</em> (Step 6), shown in <a href="toy_app_fragment.html#code-demo_index_view" class="hyperref">Listing <span class="ref">2.7</span></a>.<span class="intersentencespace"></span> Variables that start with the <code>@</code> sign, called <em>instance variables</em>, are automatically available in the views; in this case, the <code>index.html.erb</code> view in <a href="toy_app_fragment.html#code-demo_index_view" class="hyperref">Listing <span class="ref">2.7</span></a> iterates through the <code>@users</code> list and outputs a line of HTML for each one.<span class="intersentencespace"></span> (Remember, you aren’t supposed to understand this code right now.<span class="intersentencespace"></span> It is shown only for purposes of illustration.)</p>
<div class="codelisting" id="code-demo_index_view" data-tralics-id="uid160" data-number="2.7"><div class="heading"><span class="number">Listing 2.7:</span> 

<span class="description">The view for the user index.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/views/users/index.html.erb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>Listing users<span class="nt">&lt;/h1&gt;</span>

<span class="nt">&lt;table&gt;</span>
  <span class="nt">&lt;thead&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;th&gt;</span>Name<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th&gt;</span>Email<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">colspan=</span><span class="s">"3"</span><span class="nt">&gt;&lt;/th&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;/thead&gt;</span>

<span class="hll"><span class="cp">&lt;%</span> <span class="vi">@users</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span> <span class="cp">%&gt;</span>
</span>  <span class="nt">&lt;tr&gt;</span>
    <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Show'</span><span class="p">,</span> <span class="n">user</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Edit'</span><span class="p">,</span> <span class="n">edit_user_path</span><span class="p">(</span><span class="n">user</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Destroy'</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="nb">method</span><span class="p">:</span> <span class="ss">:delete</span><span class="p">,</span>
                                     <span class="ss">data</span><span class="p">:</span> <span class="p">{</span> <span class="ss">confirm</span><span class="p">:</span> <span class="s1">'Are you sure?'</span> <span class="p">}</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;/tr&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/table&gt;</span>

<span class="nt">&lt;br&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'New User'</span><span class="p">,</span> <span class="n">new_user_path</span> <span class="cp">%&gt;</span>
</pre></div></div></div><p>The view converts its contents to HTML (Step 7), which is then returned by the controller to the browser for display (Step 8).</p>
</div>
<div id="sec-weaknesses_of_this_users_resource" data-tralics-id="uid161" class="subsection" data-number="2.2.3"><h3><a href="toy_app_fragment.html#sec-weaknesses_of_this_users_resource" class="heading hyperref"><span class="number">2.2.3 </span>Weaknesses of this Users resource</a></h3>
<p>Though good for getting a general overview of Rails, the scaffold Users resource suffers from a number of severe weaknesses.</p>
<ul>
<li><strong>No data validations.</strong><span class="intersentencespace"></span> Our User model accepts data such as blank names and invalid email addresses without complaint.<span class="intersentencespace"></span>
</li>
<li><strong>No authentication.</strong><span class="intersentencespace"></span> We have no notion of logging in or out, and no way to prevent any user from performing any operation.<span class="intersentencespace"></span>
</li>
<li><strong>No tests.</strong><span class="intersentencespace"></span> This isn’t technically true—the scaffolding includes rudimentary tests—but the generated tests don’t test for data validation, authentication, or any other custom requirements.<span class="intersentencespace"></span>
</li>
<li><strong>No style or layout.</strong><span class="intersentencespace"></span> There is no consistent site styling or navigation.<span class="intersentencespace"></span>
</li>
<li><strong>No real understanding.</strong><span class="intersentencespace"></span> If you understand the scaffold code, you probably shouldn’t be reading this book.<span class="intersentencespace"></span>
</li></ul>
</div></div><div id="sec-microposts_resource" data-tralics-id="cid12" class="section" data-number="2.3"><h2><a href="toy_app_fragment.html#sec-microposts_resource" class="heading hyperref"><span class="number">2.3 </span>The Microposts resource</a></h2>
<p>Having generated and explored the Users resource, we turn now to the associated Microposts resource.<span class="intersentencespace"></span> Throughout this section, I recommend comparing the elements of the Microposts resource with the analogous user elements from <a href="toy_app_fragment.html#sec-demo_users_resource" class="hyperref">Section <span class="ref">2.2</span></a>; you should see that the two resources parallel each other in many ways.<span class="intersentencespace"></span> The RESTful structure of Rails applications is best absorbed by this sort of repetition of form—indeed, seeing the parallel structure of Users and Microposts even at this early stage is one of the prime motivations for this chapter.</p>
<div id="sec-a_micropost_microtour" data-tralics-id="uid167" class="subsection" data-number="2.3.1"><h3><a href="toy_app_fragment.html#sec-a_micropost_microtour" class="heading hyperref"><span class="number">2.3.1 </span>A micropost microtour</a></h3>
<p>As with the Users resource, we’ll generate scaffold code for the Microposts resource using <code>rails generate scaffold</code>, in this case implementing the data model from <a href="toy_app_fragment.html#fig-demo_micropost_model" class="hyperref">Figure <span class="ref">2.3</span></a>:<sup id="cha-2_footnote-ref-8" class="footnote"><a href="#cha-2_footnote-8">8</a></sup></p>
<div class="code"><div class="highlight"><pre><span class="hll">$ rails generate scaffold Micropost content:text user_id:integer
</span>      invoke  active_record
      create    db/migrate/20140821012832_create_microposts.rb
      create    app/models/micropost.rb
      invoke    test_unit
      create      test/models/micropost_test.rb
      create      test/fixtures/microposts.yml
      invoke  resource_route
       route    resources :microposts
      invoke  scaffold_controller
      create    app/controllers/microposts_controller.rb
      invoke    erb
      create      app/views/microposts
      create      app/views/microposts/index.html.erb
      create      app/views/microposts/edit.html.erb
      create      app/views/microposts/show.html.erb
      create      app/views/microposts/new.html.erb
      create      app/views/microposts/_form.html.erb
      invoke    test_unit
      create      test/controllers/microposts_controller_test.rb
      invoke    helper
      create      app/helpers/microposts_helper.rb
      invoke      test_unit
      create        test/helpers/microposts_helper_test.rb
      invoke    jbuilder
      create      app/views/microposts/index.json.jbuilder
      create      app/views/microposts/show.json.jbuilder
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/microposts.js.coffee
      invoke    scss
      create      app/assets/stylesheets/microposts.css.scss
      invoke  scss
   identical    app/assets/stylesheets/scaffolds.css.scss
</pre></div></div>
<p>(If you get an error related to Spring, just run the command again.)<span class="intersentencespace"></span> To update our database with the new data model, we need to run a migration as in <a href="toy_app_fragment.html#sec-demo_users_resource" class="hyperref">Section <span class="ref">2.2</span></a>:</p>
<div class="code"><div class="highlight"><pre><span class="hll">$ bundle exec rake db:migrate
</span>==  CreateMicroposts: migrating ===============================================
-- create_table(:microposts)
   -&gt; 0.0023s
==  CreateMicroposts: migrated (0.0026s) ======================================
</pre></div></div>
<p>Now we are in a position to create microposts in the same way we created users in <a href="toy_app_fragment.html#sec-a_user_tour" class="hyperref">Section <span class="ref">2.2.1</span></a>.<span class="intersentencespace"></span> As you might guess, the scaffold generator has updated the Rails routes file with a rule for Microposts resource, as seen in <a href="toy_app_fragment.html#code-demo_microposts_resource" class="hyperref">Listing <span class="ref">2.8</span></a>.<sup id="cha-2_footnote-ref-9" class="footnote"><a href="#cha-2_footnote-9">9</a></sup><span class="intersentencespace"></span> As with users, the <code>resources :microposts</code> routing rule maps micropost URLs to actions in the Microposts controller, as seen in <a href="toy_app_fragment.html#table-demo_RESTful_microposts" class="hyperref">Table <span class="ref">2.3</span></a>.</p>
<div class="codelisting" id="code-demo_microposts_resource" data-tralics-id="uid170" data-number="2.8"><div class="heading"><span class="number">Listing 2.8:</span> 

<span class="description">The Rails routes, with a new rule for Microposts resources.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">config/routes.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
<span class="hll">  <span class="n">resources</span> <span class="ss">:microposts</span>
</span>  <span class="n">resources</span> <span class="ss">:users</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div></div></div><div class="table" id="table-demo_RESTful_microposts" data-tralics-id="uid171" data-number="2.3"><table class="tabular">
<tbody><tr class="bottom_border"><td class="align_left"><strong>HTTP request</strong></td>
<td class="align_left"><strong>URL</strong></td>
<td class="align_left"><strong>Action</strong></td>
<td class="align_left"><strong>Purpose</strong></td>
</tr><tr><td class="align_left"><span class="tt">GET</span></td>
<td class="align_left">/microposts</td>
<td class="align_left"><code>index</code></td>
<td class="align_left">page to list all microposts</td>
</tr><tr><td class="align_left"><span class="tt">GET</span></td>
<td class="align_left">/microposts/1</td>
<td class="align_left"><code>show</code></td>
<td class="align_left">page to show micropost with id <code>1</code></td>
</tr><tr><td class="align_left"><span class="tt">GET</span></td>
<td class="align_left">/microposts/new</td>
<td class="align_left"><code>new</code></td>
<td class="align_left">page to make a new micropost</td>
</tr><tr><td class="align_left"><span class="tt">POST</span></td>
<td class="align_left">/microposts</td>
<td class="align_left"><code>create</code></td>
<td class="align_left">create a new micropost</td>
</tr><tr><td class="align_left"><span class="tt">GET</span></td>
<td class="align_left">/microposts/1/edit</td>
<td class="align_left"><code>edit</code></td>
<td class="align_left">page to edit micropost with id <code>1</code></td>
</tr><tr><td class="align_left"><span class="tt">PATCH</span></td>
<td class="align_left">/microposts/1</td>
<td class="align_left"><code>update</code></td>
<td class="align_left">update micropost with id <code>1</code></td>
</tr><tr><td class="align_left"><span class="tt">DELETE</span></td>
<td class="align_left">/microposts/1</td>
<td class="align_left"><code>destroy</code></td>
<td class="align_left">delete micropost with id <code>1</code></td>
</tr></tbody></table><div class="caption"><span class="header">Table 2.3: </span><span class="description">RESTful routes provided by the Microposts resource in <a href="toy_app_fragment.html#code-demo_microposts_resource" class="hyperref">Listing <span class="ref">2.8</span></a>.
</span></div></div>
<p>The Microposts controller itself appears in schematic form <a href="toy_app_fragment.html#code-demo_microposts_controller" class="hyperref">Listing <span class="ref">2.9</span></a>.<span class="intersentencespace"></span> Note that, apart from having <code>MicropostsController</code> in place of <code>UsersController</code>, <a href="toy_app_fragment.html#code-demo_microposts_controller" class="hyperref">Listing <span class="ref">2.9</span></a> is <em>identical</em> to the code in <a href="toy_app_fragment.html#code-demo_users_controller" class="hyperref">Listing <span class="ref">2.4</span></a>.<span class="intersentencespace"></span> This is a reflection of the REST architecture common to both resources.</p>
<div class="codelisting" id="code-demo_microposts_controller" data-tralics-id="uid172" data-number="2.9"><div class="heading"><span class="number">Listing 2.9:</span> 

<span class="description">The Microposts controller in schematic form.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/controllers/microposts_controller.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">MicropostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">index</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">show</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">new</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">edit</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">create</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">update</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">destroy</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div></div></div><p>To make some actual microposts, we enter information at the new microposts page, <a href="http://localhost:3000/microposts/new" target="_blank">/microposts/new</a>, as seen in <a href="toy_app_fragment.html#fig-demo_new_micropost" class="hyperref">Figure <span class="ref">2.12</span></a>.</p>
<div class="center figure" id="fig-demo_new_micropost" data-tralics-id="uid173" data-number="2.12">
<div class="graphics image"><img src="images/figures/demo_new_micropost_3rd_edition.png" alt="images/figures/demo_new_micropost_3rd_edition"></div><div class="caption"><span class="header">Figure 2.12: </span><span class="description">The new micropost page (<a href="http://localhost:3000/microposts/new" target="_blank">/microposts/new</a>).
</span></div></div>
<p>At this point, go ahead and create a micropost or two, taking care to make sure that at least one has a <code>user_id</code> of <code>1</code> to match the id of the first user created in <a href="toy_app_fragment.html#sec-a_user_tour" class="hyperref">Section <span class="ref">2.2.1</span></a>.<span class="intersentencespace"></span> The result should look something like <a href="toy_app_fragment.html#fig-demo_micropost_index" class="hyperref">Figure <span class="ref">2.13</span></a>.</p>
<div class="center figure" id="fig-demo_micropost_index" data-tralics-id="uid174" data-number="2.13">
<div class="graphics image"><img src="images/figures/demo_micropost_index_3rd_edition.png" alt="images/figures/demo_micropost_index_3rd_edition"></div><div class="caption"><span class="header">Figure 2.13: </span><span class="description">The micropost index page (<a href="http://localhost:3000/microposts" target="_blank">/microposts</a>).
</span></div></div>
</div>
<div id="sec-putting_the_micro_in_microposts" data-tralics-id="uid175" class="subsection" data-number="2.3.2"><h3><a href="toy_app_fragment.html#sec-putting_the_micro_in_microposts" class="heading hyperref"><span class="number">2.3.2 </span>Putting the <em>micro</em> in microposts</a></h3>
<p>Any <em>micro</em>post worthy of the name should have some means of enforcing the length of the post.<span class="intersentencespace"></span> Implementing this constraint in Rails is easy with <em>validations</em>; to accept microposts with at most 140 characters (à la Twitter), we use a <em>length</em> validation.<span class="intersentencespace"></span> At this point, you should open the file <code>app/models/micropost.rb</code> in your text editor or IDE and fill it with the contents of <a href="toy_app_fragment.html#code-demo_length_validation" class="hyperref">Listing <span class="ref">2.10</span></a>.</p>
<div class="codelisting" id="code-demo_length_validation" data-tralics-id="uid176" data-number="2.10"><div class="heading"><span class="number">Listing 2.10:</span> 

<span class="description">Constraining microposts to be at most 140 characters.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/models/micropost.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Micropost</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
<span class="hll">  <span class="n">validates</span> <span class="ss">:content</span><span class="p">,</span> <span class="ss">length</span><span class="p">:</span> <span class="p">{</span> <span class="ss">maximum</span><span class="p">:</span> <span class="mi">140</span> <span class="p">}</span>
</span><span class="k">end</span>
</pre></div></div></div><p>The code in <a href="toy_app_fragment.html#code-demo_length_validation" class="hyperref">Listing <span class="ref">2.10</span></a> may look rather mysterious—we’ll cover validations more thoroughly starting in <a href="modeling_users_fragment.html#sec-user_validations" class="hyperref">Section <span class="ref">6.2</span></a>—but its effects are readily apparent if we go to the new micropost page and enter more than 140 characters for the content of the post.<span class="intersentencespace"></span> As seen in <a href="toy_app_fragment.html#fig-micropost_length_error" class="hyperref">Figure <span class="ref">2.14</span></a>, Rails renders <em>error messages</em> indicating that the micropost’s content is too long.<span class="intersentencespace"></span> (We’ll learn more about error messages in <a href="sign_up_fragment.html#sec-signup_error_messages" class="hyperref">Section <span class="ref">7.3.3</span></a>.)</p>
<div class="center figure" id="fig-micropost_length_error" data-tralics-id="uid177" data-number="2.14">
<div class="graphics image"><img src="images/figures/micropost_length_error_3rd_edition.png" alt="images/figures/micropost_length_error_3rd_edition"></div><div class="caption"><span class="header">Figure 2.14: </span><span class="description">Error messages for a failed micropost creation.
</span></div></div>
</div>
<div id="sec-demo_user_has_many_microposts" data-tralics-id="uid178" class="subsection" data-number="2.3.3"><h3><a href="toy_app_fragment.html#sec-demo_user_has_many_microposts" class="heading hyperref"><span class="number">2.3.3 </span>A user <span class="tt">has_many</span> microposts</a></h3>
<p>One of the most powerful features of Rails is the ability to form <em>associations</em> between different data models.<span class="intersentencespace"></span> In the case of our User model, each user potentially has many microposts.<span class="intersentencespace"></span> We can express this in code by updating the User and Micropost models as in <a href="toy_app_fragment.html#code-demo_user_has_many_microposts" class="hyperref">Listing <span class="ref">2.11</span></a> and <a href="toy_app_fragment.html#code-demo_micropost_belongs_to_user" class="hyperref">Listing <span class="ref">2.12</span></a>.</p>
<div class="codelisting" id="code-demo_user_has_many_microposts" data-tralics-id="uid179" data-number="2.11"><div class="heading"><span class="number">Listing 2.11:</span> 

<span class="description">A user has many microposts.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/models/user.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
<span class="hll">  <span class="n">has_many</span> <span class="ss">:microposts</span>
</span><span class="k">end</span>
</pre></div></div></div><div class="codelisting" id="code-demo_micropost_belongs_to_user" data-tralics-id="uid180" data-number="2.12"><div class="heading"><span class="number">Listing 2.12:</span> 

<span class="description">A micropost belongs to a user.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/models/micropost.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Micropost</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
<span class="hll">  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span>  <span class="n">validates</span> <span class="ss">:content</span><span class="p">,</span> <span class="ss">length</span><span class="p">:</span> <span class="p">{</span> <span class="ss">maximum</span><span class="p">:</span> <span class="mi">140</span> <span class="p">}</span>
<span class="k">end</span>
</pre></div></div></div><p>We can visualize the result of this association in <a href="toy_app_fragment.html#fig-micropost_user_association" class="hyperref">Figure <span class="ref">2.15</span></a>.<span class="intersentencespace"></span> Because of the <code>user_id</code> column in the <code>microposts</code> table, Rails (using Active Record) can infer the microposts associated with each user.</p>
<div class="center figure" id="fig-micropost_user_association" data-tralics-id="uid181" data-number="2.15">
<div class="graphics image"><img src="images/figures/micropost_user_association.png" alt="images/figures/micropost_user_association"></div><div class="caption"><span class="header">Figure 2.15: </span><span class="description">The association between microposts and users.
</span></div></div>
<p>In <a href="user_microposts_fragment.html#cha-user_microposts" class="hyperref">Chapter <span class="ref">11</span></a> and <a href="following_users_fragment.html#cha-following_users" class="hyperref">Chapter <span class="ref">12</span></a>, we will use the association of users and microposts both to display all of a user’s microposts and to construct a Twitter-like micropost feed.<span class="intersentencespace"></span> For now, we can examine the implications of the user-micropost association by using the <em>console</em>, which is a useful tool for interacting with Rails applications.<span class="intersentencespace"></span> We first invoke the console with <code>rails console</code> at the command line, and then retrieve the first user from the database using <code>User.first</code> (putting the results in the variable <code>first_user</code>):<sup id="cha-2_footnote-ref-10" class="footnote"><a href="#cha-2_footnote-10">10</a></sup></p>
<div class="code"><div class="highlight"><pre><span class="hll"><span class="go">$ rails console</span>
</span><span class="gp">&gt;&gt; </span><span class="n">first_user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">first</span>
<span class="go">=&gt; #&lt;User id: 1, name: "Michael Hartl", email: "michael@example.org",</span>
<span class="go">created_at: "2014-07-21 02:01:31", updated_at: "2014-07-21 02:01:31"&gt;</span>
<span class="gp">&gt;&gt; </span><span class="n">first_user</span><span class="o">.</span><span class="n">microposts</span>
<span class="go">=&gt; [#&lt;Micropost id: 1, content: "First micropost!", user_id: 1, created_at:</span>
<span class="go">"2014-07-21 02:37:37", updated_at: "2014-07-21 02:37:37"&gt;, #&lt;Micropost id: 2,</span>
<span class="go">content: "Second micropost", user_id: 1, created_at: "2014-07-21 02:38:54",</span>
<span class="go">updated_at: "2014-07-21 02:38:54"&gt;]</span>
<span class="gp">&gt;&gt; </span><span class="n">micropost</span> <span class="o">=</span> <span class="n">first_user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">first</span>    <span class="c1"># Micropost.first would also work.</span>
<span class="go">=&gt; #&lt;Micropost id: 1, content: "First micropost!", user_id: 1, created_at:</span>
<span class="go">"2014-07-21 02:37:37", updated_at: "2014-07-21 02:37:37"&gt;</span>
<span class="gp">&gt;&gt; </span><span class="n">micropost</span><span class="o">.</span><span class="n">user</span>
<span class="go">=&gt; #&lt;User id: 1, name: "Michael Hartl", email: "michael@example.org",</span>
<span class="go">created_at: "2014-07-21 02:01:31", updated_at: "2014-07-21 02:01:31"&gt;</span>
<span class="gp">&gt;&gt; </span><span class="nb">exit</span>
</pre></div></div>
<p>(I include <code>exit</code> in the last line just to demonstrate how to exit the console.<span class="intersentencespace"></span> On most systems, you can also use Ctrl-D for the same purpose.)<sup id="cha-2_footnote-ref-11" class="footnote"><a href="#cha-2_footnote-11">11</a></sup> Here we have accessed the user’s microposts using the code <code>first_user.microposts</code>.<span class="intersentencespace"></span> With this code, Active Record automatically returns all the microposts with <code>user_id</code> equal to the id of <code>first_user</code> (in this case, <code>1</code>).<span class="intersentencespace"></span> We’ll learn much more about the association facilities in Active Record in <a href="user_microposts_fragment.html#cha-user_microposts" class="hyperref">Chapter <span class="ref">11</span></a> and <a href="following_users_fragment.html#cha-following_users" class="hyperref">Chapter <span class="ref">12</span></a>.</p>
</div>
<div id="sec-inheritance_hierarchies" data-tralics-id="uid184" class="subsection" data-number="2.3.4"><h3><a href="toy_app_fragment.html#sec-inheritance_hierarchies" class="heading hyperref"><span class="number">2.3.4 </span>Inheritance hierarchies</a></h3>
<p>We end our discussion of the toy application with a brief description of the controller and model class hierarchies in Rails.<span class="intersentencespace"></span> This discussion will only make much sense if you have some experience with object-oriented programming (OOP); if you haven’t studied OOP, feel free to skip this section.<span class="intersentencespace"></span> In particular, if you are unfamiliar with <em>classes</em> (discussed in <a href="rails_flavored_ruby_fragment.html#sec-ruby_classes" class="hyperref">Section <span class="ref">4.4</span></a>), I suggest looping back to this section at a later time.</p>
<p>We start with the inheritance structure for models.<span class="intersentencespace"></span> Comparing <a href="toy_app_fragment.html#code-demo_user_class" class="hyperref">Listing <span class="ref">2.13</span></a> and <a href="toy_app_fragment.html#code-demo_micropost_class" class="hyperref">Listing <span class="ref">2.14</span></a>, we see that both the User model and the Micropost model inherit (via the left angle bracket <code>&lt;</code>) from <code>ActiveRecord::Base</code>, which is the base class for models provided by ActiveRecord; a diagram summarizing this relationship appears in <a href="toy_app_fragment.html#fig-demo_model_inheritance" class="hyperref">Figure <span class="ref">2.16</span></a>.<span class="intersentencespace"></span> It is by inheriting from <code>ActiveRecord::Base</code> that our model objects gain the ability to communicate with the database, treat the database columns as Ruby attributes, and so on.</p>
<div class="codelisting" id="code-demo_user_class" data-tralics-id="uid185" data-number="2.13"><div class="heading"><span class="number">Listing 2.13:</span> 

<span class="description">The <code>User</code> class, highlighting inheritance.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/models/user.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="hll"><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span>  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div></div></div><div class="codelisting" id="code-demo_micropost_class" data-tralics-id="uid186" data-number="2.14"><div class="heading"><span class="number">Listing 2.14:</span> 

<span class="description">The <code>Micropost</code> class, highlighting inheritance.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/models/micropost.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="hll"><span class="k">class</span> <span class="nc">Micropost</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span>  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div></div></div><div class="center figure" id="fig-demo_model_inheritance" data-tralics-id="uid187" data-number="2.16">
<div class="graphics image"><img src="images/figures/demo_model_inheritance.png" alt="images/figures/demo_model_inheritance"></div><div class="caption"><span class="header">Figure 2.16: </span><span class="description">The inheritance hierarchy for the User and Micropost models.
</span></div></div>
<p>The inheritance structure for controllers is only slightly more complicated.<span class="intersentencespace"></span> Comparing <a href="toy_app_fragment.html#code-demo_users_controller_class" class="hyperref">Listing <span class="ref">2.15</span></a> and <a href="toy_app_fragment.html#code-demo_microposts_controller_class" class="hyperref">Listing <span class="ref">2.16</span></a>, we see that both the Users controller and the Microposts controller inherit from the Application controller.<span class="intersentencespace"></span> Examining <a href="toy_app_fragment.html#code-toy_application_controller_class" class="hyperref">Listing <span class="ref">2.17</span></a>, we see that <code>ApplicationController</code> itself inherits from <code>ActionController::Base</code>; this is the base class for controllers provided by the Rails library Action Pack.<span class="intersentencespace"></span> The relationships between these classes is illustrated in <a href="toy_app_fragment.html#fig-demo_controller_inheritance" class="hyperref">Figure <span class="ref">2.17</span></a>.</p>
<div class="codelisting" id="code-demo_users_controller_class" data-tralics-id="uid188" data-number="2.15"><div class="heading"><span class="number">Listing 2.15:</span> 

<span class="description">The <code>UsersController</code> class, highlighting inheritance.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/controllers/users_controller.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="hll"><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span>  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div></div></div><div class="codelisting" id="code-demo_microposts_controller_class" data-tralics-id="uid189" data-number="2.16"><div class="heading"><span class="number">Listing 2.16:</span> 

<span class="description">The <code>MicropostsController</code> class, highlighting inheritance.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/controllers/microposts_controller.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="hll"><span class="k">class</span> <span class="nc">MicropostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span>  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div></div></div><div class="codelisting" id="code-toy_application_controller_class" data-tralics-id="uid190" data-number="2.17"><div class="heading"><span class="number">Listing 2.17:</span> 

<span class="description">The <code>ApplicationController</code> class, highlighting inheritance.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/controllers/application_controller.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="hll"><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span>  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div></div></div><div class="center figure" id="fig-demo_controller_inheritance" data-tralics-id="uid191" data-number="2.17">
<div class="graphics image"><img src="images/figures/demo_controller_inheritance.png" alt="images/figures/demo_controller_inheritance"></div><div class="caption"><span class="header">Figure 2.17: </span><span class="description">The inheritance hierarchy for the Users and Microposts controllers.
</span></div></div>
<p>As with model inheritance, both the Users and Microposts controllers gain a large amount of functionality by inheriting from a base class (in this case, <code>ActionController::Base</code>), including the ability to manipulate model objects, filter inbound HTTP requests, and render views as HTML. Since all Rails controllers inherit from <code>ApplicationController</code>, rules defined in the Application controller automatically apply to every action in the application.<span class="intersentencespace"></span> For example, in <a href="log_in_log_out_fragment.html#sec-remember_me" class="hyperref">Section <span class="ref">8.4</span></a> we’ll see how to include helpers for logging in and logging out of all of the sample application’s controllers.</p>
</div>
<div id="sec-deploying_the_toy_app" data-tralics-id="uid192" class="subsection" data-number="2.3.5"><h3><a href="toy_app_fragment.html#sec-deploying_the_toy_app" class="heading hyperref"><span class="number">2.3.5 </span>Deploying the toy app</a></h3>
<p>With the completion of the Microposts resource, now is a good time to push the repository up to Bitbucket:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git status
<span class="gp">$</span> git add -A
<span class="gp">$</span> git commit -m <span class="s2">"Finish toy app"</span>
<span class="gp">$</span> git push
</pre></div></div>
<p>Ordinarily, you should make smaller, more frequent commits, but for the purposes of this chapter a single big commit at the end is fine.</p>
<p>At this point, you can also deploy the toy app to Heroku as in <a href="beginning_fragment.html#sec-deploying" class="hyperref">Section <span class="ref">1.5</span></a>:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git push heroku
</pre></div></div>
<p>(This assumes you created the Heroku app in <a href="toy_app_fragment.html#sec-planning_the_application" class="hyperref">Section <span class="ref">2.1</span></a>.<span class="intersentencespace"></span> Otherwise, you should run <code>heroku create</code> and then <code>git push heroku master</code>.)</p>
<p>To get the application’s database to work, you’ll also have to migrate the production database:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> heroku run rake db:migrate
</pre></div></div>
<p>This updates the database at Heroku with the necessary user and micropost data models.<span class="intersentencespace"></span> After running the migration, you should be able to use the toy app in production, with a real PostgreSQL database back-end (<a href="toy_app_fragment.html#fig-toy_app_production" class="hyperref">Figure <span class="ref">2.18</span></a>).</p>
<div class="center figure" id="fig-toy_app_production" data-tralics-id="uid193" data-number="2.18">
<div class="graphics image"><img src="images/figures/toy_app_production.png" alt="images/figures/toy_app_production"></div><div class="caption"><span class="header">Figure 2.18: </span><span class="description">Running the toy app in production.
</span></div></div>
</div></div><div id="sec-toy_app_conclusion" data-tralics-id="cid13" class="section" data-number="2.4"><h2><a href="toy_app_fragment.html#sec-toy_app_conclusion" class="heading hyperref"><span class="number">2.4 </span>Conclusion</a></h2>
<p>We’ve come now to the end of the high-level overview of a Rails application.<span class="intersentencespace"></span> The toy app developed in this chapter has several strengths and a host of weaknesses.<span class="intersentencespace"></span> <span class="break"></span></p>
<p><strong>Strengths</strong></p>
<ul>
<li>High-level overview of Rails
</li>
<li>Introduction to MVC
</li>
<li>First taste of the REST architecture
</li>
<li>Beginning data modeling
</li>
<li>A live, database-backed web application in production
</li></ul>
<p><strong>Weaknesses</strong></p>
<ul>
<li>No custom layout or styling
</li>
<li>No static pages (such as “Home” or “About”)
</li>
<li>No user passwords
</li>
<li>No user images
</li>
<li>No logging in
</li>
<li>No security
</li>
<li>No automatic user/micropost association
</li>
<li>No notion of “following” or “followed”
</li>
<li>No micropost feed
</li>
<li>No meaningful tests
</li>
<li><strong>No real understanding</strong>
</li></ul>
<p>The rest of this tutorial is dedicated to building on the strengths and eliminating the weaknesses.</p>
<div id="sec-toy_app_what_we_learned_in_this_chapter" data-tralics-id="uid210" class="subsection" data-number="2.4.1"><h3><a href="toy_app_fragment.html#sec-toy_app_what_we_learned_in_this_chapter" class="heading hyperref"><span class="number">2.4.1 </span>What we learned in this chapter</a></h3>
<ul>
<li>Scaffolding automatically creates code to model data and interact with it through the web.
</li>
<li>Scaffolding is good for getting started quickly but is bad for understanding.
</li>
<li>Rails uses the Model-View-Controller (MVC) pattern for structuring web applications.
</li>
<li>As interpreted by Rails, the REST architecture includes a standard set of URLs and controller actions for interacting with data models.
</li>
<li>Rails supports data validations to place constraints on the values of data model attributes.
</li>
<li>Rails comes with built-in functions for defining associations between different data models.
</li>
<li>We can interact with Rails applications at the command line using the Rails console.
</li></ul>
</div></div><div id="sec-toy_app_exercises" data-tralics-id="cid14" class="section" data-number="2.5"><h2><a href="toy_app_fragment.html#sec-toy_app_exercises" class="heading hyperref"><span class="number">2.5 </span>Exercises</a></h2>
<p><em>Note</em>: The <em>Solutions Manual for Exercises</em>, with solutions to every exercise in the <em>Ruby on Rails Tutorial</em> book, is included for free with every purchase at <a href="http://www.railstutorial.org/" target="_blank">www.railstutorial.org</a>.</p>
<ol>
<li>The code in <a href="toy_app_fragment.html#code-validates_content_presence" class="hyperref">Listing <span class="ref">2.18</span></a> shows how to add a validation for the presence of micropost content in order to ensure that microposts can’t be blank.<span class="intersentencespace"></span> Verify that you get the behavior shown in <a href="toy_app_fragment.html#fig-micropost_content_cant_be_blank" class="hyperref">Figure <span class="ref">2.19</span></a>.
</li>
<li>Update <a href="toy_app_fragment.html#code-toy_user_presence_valications" class="hyperref">Listing <span class="ref">2.19</span></a> by replacing <code>FILL_IN</code> with the appropriate code to validate the presence of name and email attributes in the User model (<a href="toy_app_fragment.html#fig-user_presence_validations" class="hyperref">Figure <span class="ref">2.20</span></a>).
</li></ol>
<div class="codelisting" id="code-validates_content_presence" data-tralics-id="uid220" data-number="2.18"><div class="heading"><span class="number">Listing 2.18:</span> 

<span class="description">Code to validate the presence of micropost content.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/models/micropost.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Micropost</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:user</span>
  <span class="n">validates</span> <span class="ss">:content</span><span class="p">,</span> <span class="ss">length</span><span class="p">:</span> <span class="p">{</span> <span class="ss">maximum</span><span class="p">:</span> <span class="mi">140</span> <span class="p">},</span>
<span class="hll">                      <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class="k">end</span>
</pre></div></div></div><div class="center figure" id="fig-micropost_content_cant_be_blank" data-tralics-id="uid221" data-number="2.19">
<div class="graphics image"><img src="images/figures/micropost_content_cant_be_blank.png" alt="images/figures/micropost_content_cant_be_blank"></div><div class="caption"><span class="header">Figure 2.19: </span><span class="description">The effect of a micropost presence validation.
</span></div></div>
<div class="codelisting" id="code-toy_user_presence_valications" data-tralics-id="uid222" data-number="2.19"><div class="heading"><span class="number">Listing 2.19:</span> 

<span class="description">Adding presence validations to the User model.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/models/user.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:microposts</span>
<span class="hll">  <span class="n">validates</span> <span class="no">FILL_IN</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class="hll">  <span class="n">validates</span> <span class="no">FILL_IN</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class="k">end</span>
</pre></div></div></div><div class="center figure" id="fig-user_presence_validations" data-tralics-id="uid223" data-number="2.20">
<div class="graphics image"><img src="images/figures/user_presence_validations.png" alt="images/figures/user_presence_validations"></div><div class="caption"><span class="header">Figure 2.20: </span><span class="description">The effect of presence validations on the User model.
</span></div></div>
</div><div id="cha-2_footnotes">
  <ol class="footnotes">
    <li id="cha-2_footnote-1">The main reason for this is that the default Rails page typically breaks at Heroku, which makes it hard to tell if the deployment was successful or not. <a class="arrow" href="#cha-2_footnote-ref-1">↑</a></li>
    <li id="cha-2_footnote-2">Because microposts are short by design, the <code>string</code> type is actually big enough to contain them, but using <code>text</code> better expresses our intent, while also giving us greater flexibility should we ever wish to relax the length constraint. <a class="arrow" href="#cha-2_footnote-ref-2">↑</a></li>
    <li id="cha-2_footnote-3">The name of the scaffold follows the convention of <em>models</em>, which are singular, rather than resources and controllers, which are plural.<span class="intersentencespace"></span> Thus, we have <code>User</code> instead of <code>Users</code>. <a class="arrow" href="#cha-2_footnote-ref-3">↑</a></li>
    <li id="cha-2_footnote-4">The <code>rails</code> script is designed so that you don’t need to use <code>bundle exec</code>. <a class="arrow" href="#cha-2_footnote-ref-4">↑</a></li>
    <li id="cha-2_footnote-5">Some references indicate that the view returns the HTML directly to the browser (via a web server such as Apache or Nginx).<span class="intersentencespace"></span> Regardless of the implementation details, I prefer to think of the controller as a central hub through which all the application’s information flows. <a class="arrow" href="#cha-2_footnote-ref-5">↑</a></li>
    <li id="cha-2_footnote-6">Fielding, Roy Thomas.<span class="intersentencespace"></span> <em>Architectural Styles and the Design of Network-based Software Architectures</em>.<span class="intersentencespace"></span> Doctoral dissertation, University of California, Irvine, 2000. <a class="arrow" href="#cha-2_footnote-ref-6">↑</a></li>
    <li id="cha-2_footnote-7">Earlier versions of Rails used <span class="tt">PUT</span> for data updates, but <span class="tt">PATCH</span> is the more appropriate method according to the HTTP standard. <a class="arrow" href="#cha-2_footnote-ref-7">↑</a></li>
    <li id="cha-2_footnote-8">As with the User scaffold, the scaffold generator for microposts follows the singular convention of Rails models; thus, we have <code>generate Micropost</code>. <a class="arrow" href="#cha-2_footnote-ref-8">↑</a></li>
    <li id="cha-2_footnote-9">The scaffold code may have extra newlines compared to <a href="toy_app_fragment.html#code-demo_microposts_resource" class="hyperref">Listing <span class="ref">2.8</span></a>.<span class="intersentencespace"></span> This is not a cause for concern, as Ruby ignores extra newlines. <a class="arrow" href="#cha-2_footnote-ref-9">↑</a></li>
    <li id="cha-2_footnote-10">Your console prompt might be something like <span class="tt">2.1.1 :001 &gt;</span>, but the examples use <span class="inline_verbatim">&gt;&gt;</span> since Ruby versions will vary. <a class="arrow" href="#cha-2_footnote-ref-10">↑</a></li>
    <li id="cha-2_footnote-11">As with “Ctrl-C”, the capital “D” refers to the key on the keyboard, not the capital letter, so you don’t have to hold down the Shift key along with the Ctrl key. <a class="arrow" href="#cha-2_footnote-ref-11">↑</a></li>
  </ol>
</div>