<div id="cha-static_pages" data-tralics-id="cid15" class="chapter" data-number="3" data-chapter="static_pages"><h1><a href="static_pages_fragment.html#cha-static_pages" class="heading hyperref"><span class="number">Chapter 3 </span>Mostly static pages</a></h1>
<p>In this chapter, we will begin developing the professional-grade sample application that will serve as our example throughout the rest of this tutorial.<span class="intersentencespace"></span> Although the sample app will eventually have users, microposts, and a full login and authentication framework, we will begin with a seemingly limited topic: the creation of static pages.<span class="intersentencespace"></span> Despite its apparent simplicity, making static pages is a highly instructive exercise, rich in implications—a perfect start for our nascent application.</p>
<p>Although Rails is designed for making database-backed dynamic websites, it also excels at making the kind of static pages we might make with raw HTML files.<span class="intersentencespace"></span> In fact, using Rails even for static pages yields a distinct advantage: we can easily add just a <em>small</em> amount of dynamic content.<span class="intersentencespace"></span> In this chapter we’ll learn how.<span class="intersentencespace"></span> Along the way, we’ll get our first taste of <em>automated testing</em>, which will help us be more confident that our code is correct.<span class="intersentencespace"></span> Moreover, having a good test suite will allow us to <em>refactor</em> our code with confidence, changing its form without changing its function.</p>
</div><div id="sec-sample_app_setup" data-tralics-id="cid16" class="section" data-number="3.1"><h2><a href="static_pages_fragment.html#sec-sample_app_setup" class="heading hyperref"><span class="number">3.1 </span>Sample app setup</a></h2>
<p>As in <a href="toy_app_fragment.html#cha-a_toy_app" class="hyperref">Chapter <span class="ref">2</span></a>, before getting started we need to create a new Rails project, this time called <code>sample_app</code>, as shown in <a href="static_pages_fragment.html#code-rails_new_sample_app" class="hyperref">Listing <span class="ref">3.1</span></a>.<sup id="cha-3_footnote-ref-1" class="footnote"><a href="#cha-3_footnote-1">1</a></sup><span class="intersentencespace"></span> If the command in <a href="static_pages_fragment.html#code-rails_new_sample_app" class="hyperref">Listing <span class="ref">3.1</span></a> returns an error like “Could not find ’railties”’, it means you don’t have the right version of Rails installed, and you should double-check that you followed the command in <a href="beginning_fragment.html#code-installing_rails" class="hyperref">Listing <span class="ref">1.1</span></a> exactly as written.</p>
<div class="codelisting" id="code-rails_new_sample_app" data-tralics-id="uid225" data-number="3.1"><div class="heading"><span class="number">Listing 3.1:</span> 

<span class="description">Generating a new sample app.</span>
</div>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">cd</span> ~/workspace
<span class="gp">$</span> rails _4.2.2_ new sample_app
<span class="gp">$</span> <span class="nb">cd </span>sample_app/
</pre></div></div></div><p>(As in <a href="toy_app_fragment.html#sec-planning_the_application" class="hyperref">Section <span class="ref">2.1</span></a>, note that users of the cloud IDE can create this project in the same workspace as the applications from the previous two chapters.<span class="intersentencespace"></span> It is not necessary to create a new workspace.)</p>
<p>As in <a href="toy_app_fragment.html#sec-planning_the_application" class="hyperref">Section <span class="ref">2.1</span></a>, our next step is to use a text editor to update the <code>Gemfile</code> with the gems needed by our application.<span class="intersentencespace"></span> <a href="static_pages_fragment.html#code-gemfile_sample_app" class="hyperref">Listing <span class="ref">3.2</span></a> is identical to <a href="beginning_fragment.html#code-gemfile_sqlite_version" class="hyperref">Listing <span class="ref">1.5</span></a> and <a href="toy_app_fragment.html#code-demo_gemfile_sqlite_version_redux" class="hyperref">Listing <span class="ref">2.1</span></a> apart from the gems in the <code>test</code> group, which are needed for the optional advanced testing setup (<a href="static_pages_fragment.html#sec-advanced_testing_setup" class="hyperref">Section <span class="ref">3.7</span></a>).<span class="intersentencespace"></span> <em>Note</em>: If you would like to install <em>all</em> the gems needed for the sample application, you should use the code in <a href="user_microposts_fragment.html#code-final_gemfile" class="hyperref">Listing <span class="ref">11.67</span></a> at this time.<span class="intersentencespace"></span> <strong>Important note: Unless you are reading this at railstutorial.org, you should use the application Gemfile listed at <a href="http://gemfiles-3rd-ed.railstutorial.org/" target="_blank">gemfiles-3rd-ed.railstutorial.org</a> instead of the one listed here.</strong></p>
<div class="codelisting" id="code-gemfile_sample_app" data-tralics-id="uid226" data-number="3.2"><div class="heading"><span class="number">Listing 3.2:</span> 

<span class="description">A <code>Gemfile</code> for the sample app.</span>
</div>

<div class="code"><div class="highlight"><pre><span class="n">source</span> <span class="s1">'https://rubygems.org'</span>

<span class="n">gem</span> <span class="s1">'rails'</span><span class="p">,</span>        <span class="s1">'4.2.2'</span>
<span class="n">gem</span> <span class="s1">'sass-rails'</span><span class="p">,</span>   <span class="s1">'5.0.2'</span>
<span class="n">gem</span> <span class="s1">'uglifier'</span><span class="p">,</span>     <span class="s1">'2.5.3'</span>
<span class="n">gem</span> <span class="s1">'coffee-rails'</span><span class="p">,</span> <span class="s1">'4.1.0'</span>
<span class="n">gem</span> <span class="s1">'jquery-rails'</span><span class="p">,</span> <span class="s1">'4.0.3'</span>
<span class="n">gem</span> <span class="s1">'turbolinks'</span><span class="p">,</span>   <span class="s1">'2.3.0'</span>
<span class="n">gem</span> <span class="s1">'jbuilder'</span><span class="p">,</span>     <span class="s1">'2.2.3'</span>
<span class="n">gem</span> <span class="s1">'sdoc'</span><span class="p">,</span>         <span class="s1">'0.4.0'</span><span class="p">,</span> <span class="ss">group</span><span class="p">:</span> <span class="ss">:doc</span>

<span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">'sqlite3'</span><span class="p">,</span>     <span class="s1">'1.3.9'</span>
  <span class="n">gem</span> <span class="s1">'byebug'</span><span class="p">,</span>      <span class="s1">'3.4.0'</span>
  <span class="n">gem</span> <span class="s1">'web-console'</span><span class="p">,</span> <span class="s1">'2.0.0.beta3'</span>
  <span class="n">gem</span> <span class="s1">'spring'</span><span class="p">,</span>      <span class="s1">'1.1.3'</span>
<span class="k">end</span>

<span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">'minitest-reporters'</span><span class="p">,</span> <span class="s1">'1.0.5'</span>
  <span class="n">gem</span> <span class="s1">'mini_backtrace'</span><span class="p">,</span>     <span class="s1">'0.1.3'</span>
  <span class="n">gem</span> <span class="s1">'guard-minitest'</span><span class="p">,</span>     <span class="s1">'2.3.1'</span>
<span class="k">end</span>

<span class="n">group</span> <span class="ss">:production</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">'pg'</span><span class="p">,</span>             <span class="s1">'0.17.1'</span>
  <span class="n">gem</span> <span class="s1">'rails_12factor'</span><span class="p">,</span> <span class="s1">'0.0.2'</span>
<span class="k">end</span>
</pre></div></div></div><p>As in the previous two chapters, we run <code>bundle install</code> to install and include the gems specified in the <code>Gemfile</code>, while skipping the installation of production gems using the option <span class="inline_verbatim">--without</span> <span class="inline_verbatim">production</span>:<sup id="cha-3_footnote-ref-2" class="footnote"><a href="#cha-3_footnote-2">2</a></sup></p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle install --without production
</pre></div></div>
<p>This arranges to skip the <span class="tt">pg</span> gem for PostgreSQL in development and use SQLite for development and testing.<span class="intersentencespace"></span> Heroku recommends against using different databases in development and production, but for the sample application it won’t make any difference, and SQLite is <em>much</em> easier than PostgreSQL to install and configure locally.<sup id="cha-3_footnote-ref-3" class="footnote intersentence"><a href="#cha-3_footnote-3">3</a></sup><span class="intersentencespace"></span>
In case you’ve previously installed a version of a gem (such as Rails itself) other than the one specified by the <code>Gemfile</code>, it’s a good idea to <em>update</em> the gems with <code>bundle update</code> to make sure the versions match:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle update
</pre></div></div>
<p>With that, all we have left is to initialize the Git repository:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git init
<span class="gp">$</span> git add -A
<span class="gp">$</span> git commit -m <span class="s2">"Initialize repository"</span>
</pre></div></div>
<p>As with the first application, I suggest updating the <code>README</code> file (located in the root directory of the application) to be more helpful and descriptive.<span class="intersentencespace"></span> We start by changing the format from RDoc to Markdown:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git mv README.rdoc README.md
</pre></div></div>
<p>We then fill it with the contents shown in <a href="static_pages_fragment.html#code-sample_app_readme" class="hyperref">Listing <span class="ref">3.3</span></a>.</p>
<div class="codelisting" id="code-sample_app_readme" data-tralics-id="uid229" data-number="3.3"><div class="heading"><span class="number">Listing 3.3:</span> 

<span class="description">An improved <code>README</code> file for the sample app.</span>
</div>

<div class="code"><div class="highlight"><pre># Ruby on Rails Tutorial: sample application

This is the sample application for the
[*Ruby on Rails Tutorial:
Learn Web Development with Rails*](http://www.railstutorial.org/)
by [Michael Hartl](http://www.michaelhartl.com/).
</pre></div></div></div><p>Finally, we commit the changes:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git commit -am <span class="s2">"Improve the README"</span>
</pre></div></div>
<p>You may recall from <a href="beginning_fragment.html#sec-git_commands" class="hyperref">Section <span class="ref">1.4.4</span></a> that we used the Git command <code>git commit -a -m "Message"</code>, with flags for “all changes” (<code>-a</code>) and a message (<code>-m</code>).<span class="intersentencespace"></span> As shown in the second command above, Git also lets us roll the two flags into one using <code>git commit -am "Message"</code>.</p>
<p>Since we’ll be using this sample app throughout the rest of the book, it’s a good idea to <a href="https://bitbucket.org/repo/create" target="_blank">create a new repository at Bitbucket</a> and push it up:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git remote add origin git@bitbucket.org:&lt;username&gt;/sample_app.git
<span class="gp">$</span> git push -u origin --all <span class="c"># pushes up the repo and its refs for the first time</span>
</pre></div></div>
<p>To avoid integration headaches later on, it’s also a good idea to deploy the app to Heroku even at this early stage.<span class="intersentencespace"></span> As in <a href="beginning_fragment.html#cha-beginning" class="hyperref">Chapter <span class="ref">1</span></a> and <a href="toy_app_fragment.html#cha-a_toy_app" class="hyperref">Chapter <span class="ref">2</span></a>, I suggest following the “hello, world!” steps in <a href="beginning_fragment.html#code-hello_action" class="hyperref">Listing <span class="ref">1.8</span></a> and <a href="beginning_fragment.html#code-default_root_route" class="hyperref">Listing <span class="ref">1.9</span></a>.<sup id="cha-3_footnote-ref-4" class="footnote"><a href="#cha-3_footnote-4">4</a></sup><span class="intersentencespace"></span> Then commit the changes and push up to Heroku:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git commit -am <span class="s2">"Add hello"</span>
<span class="gp">$</span> heroku create
<span class="gp">$</span> git push heroku master
</pre></div></div>
<p>(As in <a href="beginning_fragment.html#sec-deploying" class="hyperref">Section <span class="ref">1.5</span></a>, you may see some warning messages, which you should ignore for now.<span class="intersentencespace"></span> We’ll eliminate them in <a href="sign_up_fragment.html#sec-professional_grade_deployment" class="hyperref">Section <span class="ref">7.5</span></a>.)<span class="intersentencespace"></span> Apart from the address of the Heroku app, the result should be the same as in <a href="beginning_fragment.html#fig-heroku_app" class="hyperref">Figure <span class="ref">1.18</span></a>.<span class="intersentencespace"></span> <em>Note</em>: I’ve had some reports of an error related to the <span class="tt">spring</span> gem.<span class="intersentencespace"></span> In this case, see if running <code>spring binstub</code> at the command line fixes the issue.</p>
<p>As you proceed through the rest of the book, I recommend pushing and deploying the application regularly, which automatically makes remote backups and lets you catch any production errors as soon as possible.<span class="intersentencespace"></span> If you run into problems at Heroku, make sure to take a look at the production logs to try to diagnose the problem:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> heroku logs
</pre></div></div>
<p><em>Note</em>: If you do end up using Heroku for a real-life application, be sure to follow the production webserver configuration in <a href="sign_up_fragment.html#sec-professional_grade_deployment" class="hyperref">Section <span class="ref">7.5</span></a>.</p>
</div><div id="sec-static_pages" data-tralics-id="cid17" class="section" data-number="3.2"><h2><a href="static_pages_fragment.html#sec-static_pages" class="heading hyperref"><span class="number">3.2 </span>Static pages</a></h2>
<p>With all the preparation from <a href="static_pages_fragment.html#sec-sample_app_setup" class="hyperref">Section <span class="ref">3.1</span></a> finished, we’re ready to get started developing the sample application.<span class="intersentencespace"></span> In this section, we’ll take a first step toward making dynamic pages by creating a set of Rails <em>actions</em> and <em>views</em> containing only static HTML.<sup id="cha-3_footnote-ref-5" class="footnote"><a href="#cha-3_footnote-5">5</a></sup><span class="intersentencespace"></span> Rails actions come bundled together inside <em>controllers</em> (the C in MVC from <a href="beginning_fragment.html#sec-mvc" class="hyperref">Section <span class="ref">1.3.3</span></a>), which contain sets of actions related by a common purpose.<span class="intersentencespace"></span> We got a glimpse of controllers in <a href="toy_app_fragment.html#cha-a_toy_app" class="hyperref">Chapter <span class="ref">2</span></a>, and will come to a deeper understanding once we explore the <a href="http://en.wikipedia.org/wiki/Representational_State_Transfer" target="_blank">REST architecture</a> more fully (starting in <a href="modeling_users_fragment.html#cha-modeling_users" class="hyperref">Chapter <span class="ref">6</span></a>).<span class="intersentencespace"></span> In order to get our bearings, it’s helpful to recall the Rails directory structure from <a href="beginning_fragment.html#sec-the_hello_application" class="hyperref">Section <span class="ref">1.3</span></a> (<a href="beginning_fragment.html#fig-directory_structure_rails" class="hyperref">Figure <span class="ref">1.4</span></a>).<span class="intersentencespace"></span> In this section, we’ll be working mainly in the <code>app/controllers</code> and <code>app/views</code> directories.</p>
<p>Recall from <a href="beginning_fragment.html#sec-git_commands" class="hyperref">Section <span class="ref">1.4.4</span></a> that, when using Git, it’s a good practice to do our work on a separate topic branch rather than the master branch.<span class="intersentencespace"></span> If you’re using Git for version control, you should run the following command to checkout a topic branch for static pages:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git checkout master
<span class="gp">$</span> git checkout -b static-pages
</pre></div></div>
<p>(The first line here is just to make sure that you start on the master branch, so that the <code>static-pages</code> topic branch is based on <code>master</code>.<span class="intersentencespace"></span> You can skip that command if you’re already on the master branch.)</p>
<div id="sec-generated_static_pages" data-tralics-id="uid232" class="subsection" data-number="3.2.1"><h3><a href="static_pages_fragment.html#sec-generated_static_pages" class="heading hyperref"><span class="number">3.2.1 </span>Generated static pages</a></h3>
<p>To get started with static pages, we’ll first generate a controller using the same Rails <code>generate</code> script we used in <a href="toy_app_fragment.html#cha-a_toy_app" class="hyperref">Chapter <span class="ref">2</span></a> to generate scaffolding.<span class="intersentencespace"></span> Since we’ll be making a controller to handle static pages, we’ll call it the Static Pages controller, designated by the <a href="https://en.wikipedia.org/wiki/CamelCase" target="_blank">CamelCase</a> name <code>StaticPages</code>.<span class="intersentencespace"></span> We’ll also plan to make actions for a Home page, a Help page, and an About page, designated by the lower-case action names <code>home</code>, <code>help</code>, and <code>about</code>.<span class="intersentencespace"></span> The <code>generate</code> script takes an optional list of actions, so we’ll include actions for the Home and Help pages directly on the command line, while intentionally leaving off the action for the About page so that we can see how to add it (<a href="static_pages_fragment.html#sec-getting_started_with_testing" class="hyperref">Section <span class="ref">3.3</span></a>).<span class="intersentencespace"></span> The resulting command to generate the Static Pages controller appears in <a href="static_pages_fragment.html#code-generating_pages" class="hyperref">Listing <span class="ref">3.4</span></a>.</p>
<div class="codelisting" id="code-generating_pages" data-tralics-id="uid233" data-number="3.4"><div class="heading"><span class="number">Listing 3.4:</span> 

<span class="description">Generating a Static Pages controller.</span>
</div>

<div class="code"><div class="highlight"><pre><span class="hll">$ rails generate controller StaticPages home help
</span>      create  app/controllers/static_pages_controller.rb
       route  get 'static_pages/help'
       route  get 'static_pages/home'
      invoke  erb
      create    app/views/static_pages
      create    app/views/static_pages/home.html.erb
      create    app/views/static_pages/help.html.erb
      invoke  test_unit
      create    test/controllers/static_pages_controller_test.rb
      invoke  helper
      create    app/helpers/static_pages_helper.rb
      invoke    test_unit
      create      test/helpers/static_pages_helper_test.rb
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/static_pages.js.coffee
      invoke    scss
      create      app/assets/stylesheets/static_pages.css.scss
</pre></div></div></div><p>By the way, it’s worth noting that <code>rails g</code> is a shortcut for <code>rails generate</code>, which is only one of several shortcuts supported by Rails (<a href="static_pages_fragment.html#table-shortcuts" class="hyperref">Table <span class="ref">3.1</span></a>).<span class="intersentencespace"></span> For clarity, this tutorial always uses the full command, but in real life most Rails developers use one or more of the shortcuts shown in <a href="static_pages_fragment.html#table-shortcuts" class="hyperref">Table <span class="ref">3.1</span></a>.</p>
<div class="table" id="table-shortcuts" data-tralics-id="uid234" data-number="3.1"><table class="tabular">
<tbody><tr class="bottom_border"><td class="align_left right_border"><strong>Full command</strong></td>
<td class="align_left"><strong>Shortcut</strong></td>
</tr><tr><td class="align_left right_border"><code>$ rails server</code></td>
<td class="align_left"><code>$ rails s</code></td>
</tr><tr><td class="align_left right_border"><code>$ rails console</code></td>
<td class="align_left"><code>$ rails c</code></td>
</tr><tr><td class="align_left right_border"><code>$ rails generate</code></td>
<td class="align_left"><code>$ rails g</code></td>
</tr><tr><td class="align_left right_border"><code>$ bundle install</code></td>
<td class="align_left"><code>$ bundle</code></td>
</tr><tr><td class="align_left right_border"><code>$ rake test</code></td>
<td class="align_left"><code>$ rake</code></td>
</tr></tbody></table><div class="caption"><span class="header">Table 3.1: </span><span class="description">Some Rails shortcuts.
</span></div></div>
<p>Before moving on, if you’re using Git it’s a good idea to add the files for the Static Pages controller to the remote repository:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git status
<span class="gp">$</span> git add -A
<span class="gp">$</span> git commit -m <span class="s2">"Add a Static Pages controller"</span>
<span class="gp">$</span> git push -u origin static-pages
</pre></div></div>
<p>The final command here arranges to push the <code>static-pages</code> topic branch up to Bitbucket.<span class="intersentencespace"></span> Subsequent pushes can omit the other arguments and write simply</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git push
</pre></div></div>
<p>The commit and push sequence above represents the kind of pattern I would ordinarily follow in real-life development, but for simplicity I’ll typically omit such intermediate commits from now on.</p>
<p>In <a href="static_pages_fragment.html#code-generating_pages" class="hyperref">Listing <span class="ref">3.4</span></a>, note that we have passed the controller name as CamelCase, which leads to the creation of a controller file written in <a href="https://en.wikipedia.org/wiki/Snake_case" target="_blank">snake case</a>, so that a controller called StaticPages yields a file called <code>static_pages_controller.rb</code>.<span class="intersentencespace"></span> This is merely a convention, and in fact using snake case at the command line also works: the command</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails generate controller static_pages ...
</pre></div></div>
<p>also generates a controller called <code>static_pages_controller.rb</code>.<span class="intersentencespace"></span> Because Ruby uses CamelCase for class names (<a href="rails_flavored_ruby_fragment.html#sec-ruby_classes" class="hyperref">Section <span class="ref">4.4</span></a>), my preference is to refer to controllers using their CamelCase names, but this is a matter of taste.<span class="intersentencespace"></span> (Since Ruby filenames typically use snake case, the Rails generator converts CamelCase to snake case using the <a href="http://api.rubyonrails.org/classes/ActiveSupport/Inflector.html#method-i-underscore" target="_blank"><span class="tt">underscore</span></a> method.)</p>
<p>By the way, if you ever make a mistake when generating code, it’s useful to know how to reverse the process.<span class="intersentencespace"></span> See <a href="static_pages_fragment.html#aside-undoing_things" class="hyperref">Box <span class="ref">3.1</span></a> for some techniques on how to undo things in Rails.</p>
<div class="aside" id="aside-undoing_things" data-tralics-id="uid235" data-number="3.1"><div class="heading"><span class="number">Box 3.1.</span> 

<span class="description">Undoing things</span></div>
<p>Even when you’re very careful, things can sometimes go wrong when developing Rails applications.<span class="intersentencespace"></span> Happily, Rails has some facilities to help you recover.</p>
<p>One common scenario is wanting to undo code generation—for example, when you change your mind on the name of a controller and want to eliminate the generated files.<span class="intersentencespace"></span> Because Rails creates a substantial number of auxiliary files along with the controller (as seen in <a href="static_pages_fragment.html#code-generating_pages" class="hyperref">Listing <span class="ref">3.4</span></a>), this isn’t as easy as removing the controller file itself; undoing the generation means removing not only the principal generated file, but all the ancillary files as well.<span class="intersentencespace"></span> (In fact, as we saw in <a href="toy_app_fragment.html#sec-demo_users_resource" class="hyperref">Section <span class="ref">2.2</span></a> and <a href="toy_app_fragment.html#sec-microposts_resource" class="hyperref">Section <span class="ref">2.3</span></a>, <span class="tt">rails generate</span> can make automatic edits to the <span class="tt">routes.rb</span> file, which we also want to undo automatically.)<span class="intersentencespace"></span> In Rails, this can be accomplished with <span class="tt">rails destroy</span> followed by the name of the generated element.<span class="intersentencespace"></span> In particular, these two commands cancel each other out:</p>
<pre>  $ rails generate controller StaticPages home help
  $ rails destroy  controller StaticPages home help</pre>
<p>Similarly, in <a href="modeling_users_fragment.html#cha-modeling_users" class="hyperref">Chapter <span class="ref">6</span></a> we’ll generate a <em>model</em> as follows:</p>
<pre>  $ rails generate model User name:string email:string</pre>
<p>This can be undone using</p>
<pre>  $ rails destroy model User</pre>
<p>(In this case, it turns out we can omit the other command-line arguments.<span class="intersentencespace"></span> When you get to <a href="modeling_users_fragment.html#cha-modeling_users" class="hyperref">Chapter <span class="ref">6</span></a>, see if you can figure out why.)</p>
<p>Another technique related to models involves undoing <em>migrations</em>, which we saw briefly in <a href="toy_app_fragment.html#cha-a_toy_app" class="hyperref">Chapter <span class="ref">2</span></a> and will see much more of starting in <a href="modeling_users_fragment.html#cha-modeling_users" class="hyperref">Chapter <span class="ref">6</span></a>.<span class="intersentencespace"></span> Migrations change the state of the database using the command</p>
<pre>  $ bundle exec rake db:migrate</pre>
<p>We can undo a single migration step using</p>
<pre>  $ bundle exec rake db:rollback</pre>
<p>To go all the way back to the beginning, we can use</p>
<pre>  $ bundle exec rake db:migrate VERSION=0</pre>
<p>As you might guess, substituting any other number for <span class="tt">0</span> migrates to that version number, where the version numbers come from listing the migrations sequentially.</p>
<p>With these techniques in hand, we are well-equipped to recover from the inevitable development <a href="http://en.wikipedia.org/wiki/Military_slang#SNAFU" target="_blank">snafus</a>.<span class="intersentencespace"></span></p>

</div><p>The Static Pages controller generation in <a href="static_pages_fragment.html#code-generating_pages" class="hyperref">Listing <span class="ref">3.4</span></a> automatically updates the routes file (<code>config/routes.rb</code>), which we saw briefly in <a href="beginning_fragment.html#sec-hello_world" class="hyperref">Section <span class="ref">1.3.4</span></a>.<span class="intersentencespace"></span> The routes file is responsible for implementing the router (seen in <a href="toy_app_fragment.html#fig-mvc_detailed" class="hyperref">Figure <span class="ref">2.11</span></a>) that defines the correspondence between URLs and web pages.<span class="intersentencespace"></span> The routes file is located in the <code>config</code> directory, where Rails collects files needed for the application configuration (<a href="static_pages_fragment.html#fig-config_directory_rails" class="hyperref">Figure <span class="ref">3.1</span></a>).</p>
<div class="center figure" id="fig-config_directory_rails" data-tralics-id="uid236" data-number="3.1">
<div class="graphics image"><img src="images/figures/config_directory_3rd_edition.png" alt="images/figures/config_directory_3rd_edition"></div><div class="caption"><span class="header">Figure 3.1: </span><span class="description">Contents of the sample app’s <code>config</code> directory.
</span></div></div>
<p>Since we included the <code>home</code> and <code>help</code> actions in <a href="static_pages_fragment.html#code-generating_pages" class="hyperref">Listing <span class="ref">3.4</span></a>, the routes file already has a rule for each one, as seen in <a href="static_pages_fragment.html#code-pages_routes" class="hyperref">Listing <span class="ref">3.5</span></a>.</p>
<div class="codelisting" id="code-pages_routes" data-tralics-id="uid237" data-number="3.5"><div class="heading"><span class="number">Listing 3.5:</span> 

<span class="description">The routes for the <code>home</code> and <code>help</code> actions in the Static Pages controller.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">config/routes.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
<span class="hll">  <span class="n">get</span> <span class="s1">'static_pages/home'</span>
</span><span class="hll">  <span class="n">get</span> <span class="s1">'static_pages/help'</span>
</span>  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div></div></div><p>Here the rule</p>
<div class="code"><div class="highlight"><pre><span class="n">get</span> <span class="s1">'static_pages/home'</span>
</pre></div></div>
<p>maps requests for the URL /static_pages/home to the <code>home</code> action in the Static Pages controller.<span class="intersentencespace"></span> Moreover, by using <code>get</code> we arrange for the route to respond to a <span class="tt">GET</span> request, which is one of the fundamental <em>HTTP verbs</em> supported by the hypertext transfer protocol (<a href="static_pages_fragment.html#aside-get_etc" class="hyperref">Box <span class="ref">3.2</span></a>).<span class="intersentencespace"></span> In our case, this means that when we generate a <code>home</code> action inside the Static Pages controller we automatically get a page at the address /static_pages/home.<span class="intersentencespace"></span> To see the result, start a Rails development server as described in <a href="beginning_fragment.html#sec-rails_server" class="hyperref">Section <span class="ref">1.3.2</span></a>:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails server -b <span class="nv">$IP</span> -p <span class="nv">$PORT</span>    <span class="c"># Use only `rails server` if running locally</span>
</pre></div></div>
<p>Then navigate to <a href="http://localhost:3000/static_pages/home" target="_blank">/static_pages/home</a> (<a href="static_pages_fragment.html#fig-raw_home_view" class="hyperref">Figure <span class="ref">3.2</span></a>).</p>
<div class="center figure" id="fig-raw_home_view" data-tralics-id="uid238" data-number="3.2">
<div class="graphics image"><img src="images/figures/raw_home_view_3rd_edition.png" alt="images/figures/raw_home_view_3rd_edition"></div><div class="caption"><span class="header">Figure 3.2: </span><span class="description">The raw home view (<a href="http://localhost:3000/static_pages/home" target="_blank">/static_pages/home</a>).
</span></div></div>
<div class="aside" id="aside-get_etc" data-tralics-id="uid239" data-number="3.2"><div class="heading"><span class="number">Box 3.2.</span> 

<span class="description"><span class="tt">GET</span>, et cet.</span></div>
<p>The hypertext transfer protocol (<a href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods" target="_blank">HTTP</a>) defines the basic operations <span class="tt">GET</span>, <span class="tt">POST</span>, <span class="tt">PATCH</span>, and <span class="tt">DELETE</span>.<span class="intersentencespace"></span> These refer to operations between a <em>client</em> computer (typically running a web browser such as Chrome, Firefox, or Safari) and a <em>server</em> (typically running a web server such as Apache or Nginx).<span class="intersentencespace"></span> (It’s important to understand that, when developing Rails applications on a local computer, the client and server are the same physical machine, but in general they are different.)<span class="intersentencespace"></span> An emphasis on HTTP verbs is typical of web frameworks (including Rails) influenced by the <em>REST architecture</em>, which we saw briefly in <a href="toy_app_fragment.html#cha-a_toy_app" class="hyperref">Chapter <span class="ref">2</span></a> and will start learning about more in <a href="sign_up_fragment.html#cha-sign_up" class="hyperref">Chapter <span class="ref">7</span></a>.</p>
<p><span class="tt">GET</span> is the most common HTTP operation, used for <em>reading</em> data on the web; it just means “get a page”, and every time you visit a site like <a href="http://www.google.com/" target="_blank">http://www.google.com/</a> or <a href="http://www.wikipedia.org/" target="_blank">http://www.wikipedia.org/</a> your browser is submitting a <span class="tt">GET</span> request.<span class="intersentencespace"></span> <span class="tt">POST</span> is the next most common operation; it is the request sent by your browser when you submit a form.<span class="intersentencespace"></span> In Rails applications, <span class="tt">POST</span> requests are typically used for <em>creating</em> things (although HTTP also allows <span class="tt">POST</span> to perform updates).<span class="intersentencespace"></span> For example, the <span class="tt">POST</span> request sent when you submit a registration form creates a new user on the remote site.<span class="intersentencespace"></span> The other two verbs, <span class="tt">PATCH</span> and <span class="tt">DELETE</span>, are designed for <em>updating</em> and <em>destroying</em> things on the remote server.<span class="intersentencespace"></span> These requests are less common than <span class="tt">GET</span> and <span class="tt">POST</span> since browsers are incapable of sending them natively, but some web frameworks (including Ruby on Rails) have clever ways of making it <em>seem</em> like browsers are issuing such requests.<span class="intersentencespace"></span> As a result, Rails supports all four of the request types <span class="tt">GET</span>, <span class="tt">POST</span>, <span class="tt">PATCH</span>, and <span class="tt">DELETE</span>.<span class="intersentencespace"></span></p>

</div><p>To understand where this page comes from, let’s start by taking a look at the Static Pages controller in a text editor, which should look something like <a href="static_pages_fragment.html#code-static_pages_controller" class="hyperref">Listing <span class="ref">3.6</span></a>.<span class="intersentencespace"></span> You may note that, unlike the demo Users and Microposts controllers from <a href="toy_app_fragment.html#cha-a_toy_app" class="hyperref">Chapter <span class="ref">2</span></a>, the Static Pages controller does not use the standard REST actions.<span class="intersentencespace"></span> This is normal for a collection of static pages: the REST architecture isn’t the best solution to every problem.</p>
<div class="codelisting" id="code-static_pages_controller" data-tralics-id="uid240" data-number="3.6"><div class="heading"><span class="number">Listing 3.6:</span> 

<span class="description">The Static Pages controller made by <a href="static_pages_fragment.html#code-generating_pages" class="hyperref">Listing <span class="ref">3.4</span></a>.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/controllers/static_pages_controller.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">StaticPagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

  <span class="k">def</span> <span class="nf">home</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">help</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div></div></div><p>We see from the <code>class</code> keyword in <a href="static_pages_fragment.html#code-static_pages_controller" class="hyperref">Listing <span class="ref">3.6</span></a> that <code>static_pages_controller.rb</code> defines a <em>class</em>, in this case called <code>StaticPagesController</code>.<span class="intersentencespace"></span> Classes are simply a convenient way to organize <em>functions</em> (also called <em>methods</em>) like the <code>home</code> and <code>help</code> actions, which are defined using the <code>def</code> keyword.<span class="intersentencespace"></span> As discussed in <a href="toy_app_fragment.html#sec-inheritance_hierarchies" class="hyperref">Section <span class="ref">2.3.4</span></a>, the angle bracket <code>&lt;</code> indicates that <code>StaticPagesController</code> <em>inherits</em> from the Rails class <code>ApplicationController</code>; as we’ll see in a moment, this means that our pages come equipped with a large amount of Rails-specific functionality.<span class="intersentencespace"></span> (We’ll learn more about both classes and inheritance in <a href="rails_flavored_ruby_fragment.html#sec-ruby_classes" class="hyperref">Section <span class="ref">4.4</span></a>.)</p>
<p>In the case of the Static Pages controller, both of its methods are initially empty:</p>
<div class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">home</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">help</span>
<span class="k">end</span>
</pre></div></div>
<p>In plain Ruby, these methods would simply do nothing.<span class="intersentencespace"></span> In Rails, the situation is different—<code>StaticPagesController</code> is a Ruby class, but because it inherits from <code>ApplicationController</code> the behavior of its methods is specific to Rails: when visiting the URL /static_pages/home, Rails looks in the Static Pages controller and executes the code in the <code>home</code> action, and then renders the <em>view</em> (the V in MVC from <a href="beginning_fragment.html#sec-mvc" class="hyperref">Section <span class="ref">1.3.3</span></a>) corresponding to the action.<span class="intersentencespace"></span> In the present case, the <code>home</code> action is empty, so all visiting /static_pages/home does is render the view.<span class="intersentencespace"></span> So, what does a view look like, and how do we find it?</p>
<p>If you take another look at the output in <a href="static_pages_fragment.html#code-generating_pages" class="hyperref">Listing <span class="ref">3.4</span></a>, you might be able to guess the correspondence between actions and views: an action like <code>home</code> has a corresponding view called <code>home.html.erb</code>.<span class="intersentencespace"></span> We’ll learn in <a href="static_pages_fragment.html#sec-slightly_dynamic_pages" class="hyperref">Section <span class="ref">3.4</span></a> what the <code>.erb</code> part means; from the <code>.html</code> part you probably won’t be surprised that it basically looks like HTML (<a href="static_pages_fragment.html#code-raw_home_view" class="hyperref">Listing <span class="ref">3.7</span></a>).</p>
<div class="codelisting" id="code-raw_home_view" data-tralics-id="uid241" data-number="3.7"><div class="heading"><span class="number">Listing 3.7:</span> 

<span class="description">The generated view for the Home page.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/views/static_pages/home.html.erb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>StaticPages#home<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;p&gt;</span>Find me in app/views/static_pages/home.html.erb<span class="nt">&lt;/p&gt;</span>
</pre></div></div></div><p>The view for the <code>help</code> action is analogous (<a href="static_pages_fragment.html#code-raw_help_view" class="hyperref">Listing <span class="ref">3.8</span></a>).</p>
<div class="codelisting" id="code-raw_help_view" data-tralics-id="uid242" data-number="3.8"><div class="heading"><span class="number">Listing 3.8:</span> 

<span class="description">The generated view for the Help page.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/views/static_pages/help.html.erb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>StaticPages#help<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;p&gt;</span>Find me in app/views/static_pages/help.html.erb<span class="nt">&lt;/p&gt;</span>
</pre></div></div></div><p>Both of these views are just placeholders: they have a top-level heading (inside the <code>h1</code> tag) and a paragraph (<code>p</code> tag) with the full path to the corresponding file.</p>
</div>
<div id="sec-custom_static_pages" data-tralics-id="uid243" class="subsection" data-number="3.2.2"><h3><a href="static_pages_fragment.html#sec-custom_static_pages" class="heading hyperref"><span class="number">3.2.2 </span>Custom static pages</a></h3>
<p>We’ll add some (very slightly) dynamic content starting in <a href="static_pages_fragment.html#sec-slightly_dynamic_pages" class="hyperref">Section <span class="ref">3.4</span></a>, but as they stand the views in <a href="static_pages_fragment.html#code-raw_home_view" class="hyperref">Listing <span class="ref">3.7</span></a> and <a href="static_pages_fragment.html#code-raw_help_view" class="hyperref">Listing <span class="ref">3.8</span></a> underscore an important point: Rails views can simply contain static HTML. This means we can begin customizing the Home and Help pages even with no knowledge of Rails, as shown in <a href="static_pages_fragment.html#code-custom_home_page" class="hyperref">Listing <span class="ref">3.9</span></a> and <a href="static_pages_fragment.html#code-custom_help_page" class="hyperref">Listing <span class="ref">3.10</span></a>.</p>
<div class="codelisting" id="code-custom_home_page" data-tralics-id="uid244" data-number="3.9"><div class="heading"><span class="number">Listing 3.9:</span> 

<span class="description">Custom HTML for the Home page.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/views/static_pages/home.html.erb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>Sample App<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;p&gt;</span>
  This is the home page for the
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://www.railstutorial.org/"</span><span class="nt">&gt;</span>Ruby on Rails Tutorial<span class="nt">&lt;/a&gt;</span>
  sample application.
<span class="nt">&lt;/p&gt;</span>
</pre></div></div></div><div class="codelisting" id="code-custom_help_page" data-tralics-id="uid245" data-number="3.10"><div class="heading"><span class="number">Listing 3.10:</span> 

<span class="description">Custom HTML for the Help page.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/views/static_pages/help.html.erb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>Help<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;p&gt;</span>
  Get help on the Ruby on Rails Tutorial at the
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://www.railstutorial.org/#help"</span><span class="nt">&gt;</span>Rails Tutorial help section<span class="nt">&lt;/a&gt;</span>.
  To get help on this sample app, see the
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://www.railstutorial.org/book"</span><span class="nt">&gt;&lt;em&gt;</span>Ruby on Rails Tutorial<span class="nt">&lt;/em&gt;</span>
  book<span class="nt">&lt;/a&gt;</span>.
<span class="nt">&lt;/p&gt;</span>
</pre></div></div></div><p>The results of <a href="static_pages_fragment.html#code-custom_home_page" class="hyperref">Listing <span class="ref">3.9</span></a> and <a href="static_pages_fragment.html#code-custom_help_page" class="hyperref">Listing <span class="ref">3.10</span></a> are shown in <a href="static_pages_fragment.html#fig-custom_home_page" class="hyperref">Figure <span class="ref">3.3</span></a> and <a href="static_pages_fragment.html#fig-custom_help_page" class="hyperref">Figure <span class="ref">3.4</span></a>.</p>
<div class="center figure" id="fig-custom_home_page" data-tralics-id="uid246" data-number="3.3">
<div class="graphics image"><img src="images/figures/custom_home_page.png" alt="images/figures/custom_home_page"></div><div class="caption"><span class="header">Figure 3.3: </span><span class="description">A custom Home page.
</span></div></div>
<div class="center figure" id="fig-custom_help_page" data-tralics-id="uid247" data-number="3.4">
<div class="graphics image"><img src="images/figures/custom_help_page_3rd_edition.png" alt="images/figures/custom_help_page_3rd_edition"></div><div class="caption"><span class="header">Figure 3.4: </span><span class="description">A custom Help page.
</span></div></div>
</div></div><div id="sec-getting_started_with_testing" data-tralics-id="cid18" class="section" data-number="3.3"><h2><a href="static_pages_fragment.html#sec-getting_started_with_testing" class="heading hyperref"><span class="number">3.3 </span>Getting started with testing</a></h2>
<p>Having created and filled in the Home and Help pages for our sample app (<a href="static_pages_fragment.html#sec-custom_static_pages" class="hyperref">Section <span class="ref">3.2.2</span></a>), now we’re going to add an About page as well.<span class="intersentencespace"></span> When making a change of this nature, it’s a good practice to write an <em>automated test</em> to verify that the feature is implemented correctly.<span class="intersentencespace"></span> Developed over the course of building an application, the resulting <em>test suite</em> serves as a safety net and as executable documentation of the application source code.<span class="intersentencespace"></span> When done right, writing tests also allows us to develop <em>faster</em> despite requiring extra code, because we’ll end up wasting less time trying to track down bugs.<span class="intersentencespace"></span> This is true only once we get good at writing tests, though, which is one reason it’s important to start practicing as early as possible.</p>
<p>Although virtually all Rails developers agree that testing is a good idea, there is a diversity of opinion on the details.<span class="intersentencespace"></span> There is an especially lively debate over the use of test-driven development (TDD),<sup id="cha-3_footnote-ref-6" class="footnote"><a href="#cha-3_footnote-6">6</a></sup> a testing technique in which the programmer writes failing tests first, and then writes the application code to get the tests to pass.<span class="intersentencespace"></span> The <em>Ruby on Rails Tutorial</em> takes a lightweight, intuitive approach to testing, employing TDD when convenient without being dogmatic about it (<a href="static_pages_fragment.html#aside-when_to_test" class="hyperref">Box <span class="ref">3.3</span></a>).</p>
<div class="aside" id="aside-when_to_test" data-tralics-id="uid249" data-number="3.3"><div class="heading"><span class="number">Box 3.3.</span> 

<span class="description">When to test</span></div>
<p>When deciding when and how to test, it’s helpful to understand <em>why</em> to test.<span class="intersentencespace"></span> In my view, writing automated tests has three main benefits:</p>
<ol>
<li>Tests protect against <em>regressions</em>, where a functioning feature stops working for some reason.<span class="intersentencespace"></span>
</li>
<li>Tests allow code to be <em>refactored</em> (i.e., changing its form without changing its function) with greater confidence.<span class="intersentencespace"></span>
</li>
<li>Tests act as a <em>client</em> for the application code, thereby helping determine its design and its interface with other parts of the system.<span class="intersentencespace"></span>
</li></ol>
<p>Although none of the above benefits <em>require</em> that tests be written first, there are many circumstances where test-driven development (TDD) is a valuable tool to have in your kit.<span class="intersentencespace"></span> Deciding when and how to test depends in part on how comfortable you are writing tests; many developers find that, as they get better at writing tests, they are more inclined to write them first.<span class="intersentencespace"></span> It also depends on how difficult the test is relative to the application code, how precisely the desired features are known, and how likely the feature is to break in the future.</p>
<p>In this context, it’s helpful to have a set of guidelines on when we should test first (or test at all).<span class="intersentencespace"></span> Here are some suggestions based on my own experience:</p>
<ul>
<li>When a test is especially short or simple compared to the application code it tests, lean toward writing the test first.
</li>
<li>When the desired behavior isn’t yet crystal clear, lean toward writing the application code first, then write a test to codify the result.
</li>
<li>Because security is a top priority, err on the side of writing tests of the security model first.
</li>
<li>Whenever a bug is found, write a test to reproduce it and protect against regressions, then write the application code to fix it.
</li>
<li>Lean against writing tests for code (such as detailed HTML structure) likely to change in the future.
</li>
<li>Write tests before refactoring code, focusing on testing error-prone code that’s especially likely to break.<span class="intersentencespace"></span>
</li></ul>
<p>In practice, the guidelines above mean that we’ll usually write controller and model tests first and integration tests (which test functionality across models, views, and controllers) second.<span class="intersentencespace"></span> And when we’re writing application code that isn’t particularly brittle or error-prone, or is likely to change (as is often the case with views), we’ll often skip testing altogether.<span class="intersentencespace"></span></p>

</div><p>Our main testing tools will be <em>controller tests</em> (starting in this section), <em>model tests</em> (starting in <a href="modeling_users_fragment.html#cha-modeling_users" class="hyperref">Chapter <span class="ref">6</span></a>), and <em>integration tests</em> (starting in <a href="sign_up_fragment.html#cha-sign_up" class="hyperref">Chapter <span class="ref">7</span></a>).<span class="intersentencespace"></span> Integration tests are especially powerful, as they allow us to simulate the actions of a user interacting with our application using a web browser.<span class="intersentencespace"></span> Integration tests will eventually be our primary testing technique, but controller tests give us an easier place to start.</p>
<div id="sec-our_first_test" data-tralics-id="uid259" class="subsection" data-number="3.3.1"><h3><a href="static_pages_fragment.html#sec-our_first_test" class="heading hyperref"><span class="number">3.3.1 </span>Our first test</a></h3>
<p>Now it’s time to add an About page to our application.<span class="intersentencespace"></span> As we’ll see, the test is short and simple, so we’ll follow the guidelines from <a href="static_pages_fragment.html#aside-when_to_test" class="hyperref">Box <span class="ref">3.3</span></a> and write the test first.<span class="intersentencespace"></span> We’ll then use the failing test to drive the writing of the application code.</p>
<p>Getting started with testing can be challenging, requiring extensive knowledge of both Rails and Ruby.<span class="intersentencespace"></span> At this early stage, writing tests might thus seem hopelessly intimidating.<span class="intersentencespace"></span> Luckily, Rails has already done the hardest part for us, because <code>rails generate controller</code> (<a href="static_pages_fragment.html#code-generating_pages" class="hyperref">Listing <span class="ref">3.4</span></a>) automatically generated a test file to get us started:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> ls <span class="nb">test</span>/controllers/
<span class="go">static_pages_controller_test.rb</span>
</pre></div></div>
<p>Let’s take a look at it (<a href="static_pages_fragment.html#code-default_controller_test" class="hyperref">Listing <span class="ref">3.11</span></a>).</p>
<div class="codelisting" id="code-default_controller_test" data-tralics-id="uid260" data-number="3.11"><div class="heading"><span class="number">Listing 3.11:</span> 

<span class="description">The default tests for the StaticPages controller.<span class="intersentencespace"></span> <span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span><span class="break"></span> <span class="filepath">test/controllers/static_pages_controller_test.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">'test_helper'</span>

<span class="k">class</span> <span class="nc">StaticPagesControllerTest</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">TestCase</span>

  <span class="nb">test</span> <span class="s2">"should get home"</span> <span class="k">do</span>
    <span class="n">get</span> <span class="ss">:home</span>
    <span class="n">assert_response</span> <span class="ss">:success</span>
  <span class="k">end</span>

  <span class="nb">test</span> <span class="s2">"should get help"</span> <span class="k">do</span>
    <span class="n">get</span> <span class="ss">:help</span>
    <span class="n">assert_response</span> <span class="ss">:success</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div></div></div><p>It’s not important at this point to understand the syntax in <a href="static_pages_fragment.html#code-default_controller_test" class="hyperref">Listing <span class="ref">3.11</span></a> in detail, but we can see that there are two tests, one for each controller action we included on the command line in <a href="static_pages_fragment.html#code-generating_pages" class="hyperref">Listing <span class="ref">3.4</span></a>.<span class="intersentencespace"></span> Each test simply gets an action and verifies (via an <em>assertion</em>) that the result is a success.<span class="intersentencespace"></span> Here the use of <code>get</code> indicates that our tests expect the Home and Help pages to be ordinary web pages, accessed using a <span class="tt">GET</span> request (<a href="static_pages_fragment.html#aside-get_etc" class="hyperref">Box <span class="ref">3.2</span></a>).<span class="intersentencespace"></span> The response <code>:success</code> is an abstract representation of the underlying HTTP <a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes" target="_blank">status code</a> (in this case, <a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#2xx_Success" target="_blank">200 OK</a>).<span class="intersentencespace"></span> In other words, a test like</p>
<div class="code"><div class="highlight"><pre><span class="nb">test</span> <span class="s2">"should get home"</span> <span class="k">do</span>
  <span class="n">get</span> <span class="ss">:home</span>
  <span class="n">assert_response</span> <span class="ss">:success</span>
<span class="k">end</span>
</pre></div></div>
<p>says “Let’s test the Home page by issuing a <span class="tt">GET</span> request to the <code>home</code> action and then making sure we receive a ‘success’ status code in response.”</p>
<p>To begin our testing cycle, we need to run our test suite to verify that the tests currently pass.<span class="intersentencespace"></span> We can do this with the <code>rake</code> utility (<a href="toy_app_fragment.html#aside-rake" class="hyperref">Box <span class="ref">2.1</span></a>) as follows:<sup id="cha-3_footnote-ref-7" class="footnote"><a href="#cha-3_footnote-7">7</a></sup></p>
<div class="codelisting" id="uid262" data-tralics-id="uid262" data-number="3.12"><div class="heading"><span class="number">Listing 3.12:</span> <span class="description"><span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span></span>
</div>

<div class="code"><div class="highlight"><pre>$ bundle exec rake test
2 tests, 2 assertions, 0 failures, 0 errors, 0 skips
</pre></div></div></div><p>As required, initially our test suite is passing (<span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span>).<span class="intersentencespace"></span> (You won’t actually see the color green unless you add minitest reporters in the optional <a href="static_pages_fragment.html#sec-minitest_reporters" class="hyperref">Section <span class="ref">3.7.1</span></a>.)<span class="intersentencespace"></span> By the way, the tests take some time to start, which is due to two factors: (1) starting the <em>Spring server</em> to preload parts of the Rails environment, which only happens the first time; and (2) overhead associated with Ruby startup time.<span class="intersentencespace"></span> (The second factor is ameliorated when using Guard as suggested in <a href="static_pages_fragment.html#sec-guard" class="hyperref">Section <span class="ref">3.7.3</span></a>.)</p>
</div>
<div id="sec-red" data-tralics-id="uid263" class="subsection" data-number="3.3.2"><h3><a href="static_pages_fragment.html#sec-red" class="heading hyperref"><span class="number">3.3.2 </span>Red</a></h3>
<p>As noted in <a href="static_pages_fragment.html#aside-when_to_test" class="hyperref">Box <span class="ref">3.3</span></a>, test-driven development involves writing a failing test first, writing the application code needed to get it to pass, and then refactoring the code if necessary.<span class="intersentencespace"></span> Because many testing tools represent failing tests with the color red and passing tests with the color green, this sequence is sometimes known as the “Red, Green, Refactor” cycle.<span class="intersentencespace"></span> In this section, we’ll complete the first step in this cycle, getting to <span style="color: red"><span class="sc"></span><span class="sc"><strong>red</strong></span><span class="sc"></span></span> by writing a failing test.<span class="intersentencespace"></span> Then we’ll get to <span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span> in <a href="static_pages_fragment.html#sec-green" class="hyperref">Section <span class="ref">3.3.3</span></a>, and refactor in <a href="static_pages_fragment.html#sec-layouts_and_embedded_ruby" class="hyperref">Section <span class="ref">3.4.3</span></a>.<sup id="cha-3_footnote-ref-8" class="footnote"><a href="#cha-3_footnote-8">8</a></sup></p>
<p>Our first step is to write a failing test for the About page.<span class="intersentencespace"></span> Following the models from <a href="static_pages_fragment.html#code-default_controller_test" class="hyperref">Listing <span class="ref">3.11</span></a>, you can probably guess the right test, which is shown in <a href="static_pages_fragment.html#code-about_test" class="hyperref">Listing <span class="ref">3.13</span></a>.</p>
<div class="codelisting" id="code-about_test" data-tralics-id="uid265" data-number="3.13"><div class="heading"><span class="number">Listing 3.13:</span> 

<span class="description">A test for the About page.<span class="intersentencespace"></span> <span style="color: red"><span class="sc"></span><span class="sc"><strong>red</strong></span><span class="sc"></span></span><span class="break"></span> <span class="filepath">test/controllers/static_pages_controller_test.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">'test_helper'</span>

<span class="k">class</span> <span class="nc">StaticPagesControllerTest</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">TestCase</span>

  <span class="nb">test</span> <span class="s2">"should get home"</span> <span class="k">do</span>
    <span class="n">get</span> <span class="ss">:home</span>
    <span class="n">assert_response</span> <span class="ss">:success</span>
  <span class="k">end</span>

  <span class="nb">test</span> <span class="s2">"should get help"</span> <span class="k">do</span>
    <span class="n">get</span> <span class="ss">:help</span>
    <span class="n">assert_response</span> <span class="ss">:success</span>
  <span class="k">end</span>

<span class="hll">  <span class="nb">test</span> <span class="s2">"should get about"</span> <span class="k">do</span>
</span><span class="hll">    <span class="n">get</span> <span class="ss">:about</span>
</span><span class="hll">    <span class="n">assert_response</span> <span class="ss">:success</span>
</span><span class="hll">  <span class="k">end</span>
</span><span class="k">end</span>
</pre></div></div></div><p>We see from the highlighted lines in <a href="static_pages_fragment.html#code-about_test" class="hyperref">Listing <span class="ref">3.13</span></a> that the test for the About page is the same as the Home and Help tests with the word “about” in place of “home” or “help”.</p>
<p>As required, the test initially fails:</p>
<div class="codelisting" id="uid266" data-tralics-id="uid266" data-number="3.14"><div class="heading"><span class="number">Listing 3.14:</span> <span class="description"><span style="color: red"><span class="sc"></span><span class="sc"><strong>red</strong></span><span class="sc"></span></span></span>
</div>

<div class="code"><div class="highlight"><pre>$ bundle exec rake test
3 tests, 2 assertions, 0 failures, 1 errors, 0 skips
</pre></div></div></div></div>
<div id="sec-green" data-tralics-id="uid267" class="subsection" data-number="3.3.3"><h3><a href="static_pages_fragment.html#sec-green" class="heading hyperref"><span class="number">3.3.3 </span>Green</a></h3>
<p>Now that we have a failing test (<span style="color: red"><span class="sc"></span><span class="sc"><strong>red</strong></span><span class="sc"></span></span>), we’ll use the failing test’s error messages to guide us to a passing test (<span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span>), thereby implementing a working About page.</p>
<p>We can get started by examining the error message output by the failing test:<sup id="cha-3_footnote-ref-9" class="footnote"><a href="#cha-3_footnote-9">9</a></sup></p>
<div class="codelisting" id="uid269" data-tralics-id="uid269" data-number="3.15"><div class="heading"><span class="number">Listing 3.15:</span> <span class="description"><span style="color: red"><span class="sc"></span><span class="sc"><strong>red</strong></span><span class="sc"></span></span></span>
</div>

<div class="code"><div class="highlight"><pre>$ bundle exec rake test
ActionController::UrlGenerationError:
No route matches {:action=&gt;"about", :controller=&gt;"static_pages"}
</pre></div></div></div><p>The error message here says that no route matches the desired action/controller combination, which is a hint that we need to add a line to the routes file.<span class="intersentencespace"></span> We can accomplish this by following the pattern in <a href="static_pages_fragment.html#code-pages_routes" class="hyperref">Listing <span class="ref">3.5</span></a>, as shown in <a href="static_pages_fragment.html#code-about_route" class="hyperref">Listing <span class="ref">3.16</span></a>.</p>
<div class="codelisting" id="code-about_route" data-tralics-id="uid270" data-number="3.16"><div class="heading"><span class="number">Listing 3.16:</span> 

<span class="description">Adding the <code>about</code> route.<span class="intersentencespace"></span> <span style="color: red"><span class="sc"></span><span class="sc"><strong>red</strong></span><span class="sc"></span></span><span class="break"></span> <span class="filepath">config/routes.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
  <span class="n">get</span> <span class="s1">'static_pages/home'</span>
  <span class="n">get</span> <span class="s1">'static_pages/help'</span>
<span class="hll">  <span class="n">get</span> <span class="s1">'static_pages/about'</span>
</span>  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div></div></div><p>The highlighted line in <a href="static_pages_fragment.html#code-about_route" class="hyperref">Listing <span class="ref">3.16</span></a> tells Rails to route a <span class="tt">GET</span> request for the URL /static_pages/about to the <code>about</code> action in the Static Pages controller.</p>
<p>Running our test suite again, we see that it is still <span style="color: red"><span class="sc"></span><span class="sc"><strong>red</strong></span><span class="sc"></span></span>, but now the error message has changed:</p>
<div class="codelisting" id="uid271" data-tralics-id="uid271" data-number="3.17"><div class="heading"><span class="number">Listing 3.17:</span> <span class="description"><span style="color: red"><span class="sc"></span><span class="sc"><strong>red</strong></span><span class="sc"></span></span></span>
</div>

<div class="code"><div class="highlight"><pre>$ bundle exec rake test
AbstractController::ActionNotFound:
The action 'about' could not be found for StaticPagesController
</pre></div></div></div><p>The error message now indicates a missing <code>about</code> action in the Static Pages controller, which we can add by following the model provided by <code>home</code> and <code>help</code> in <a href="static_pages_fragment.html#code-static_pages_controller" class="hyperref">Listing <span class="ref">3.6</span></a>, as shown in <a href="static_pages_fragment.html#code-adding_the_about_page" class="hyperref">Listing <span class="ref">3.18</span></a>.</p>
<div class="codelisting" id="code-adding_the_about_page" data-tralics-id="uid272" data-number="3.18"><div class="heading"><span class="number">Listing 3.18:</span> 

<span class="description">The Static Pages controller with added <code>about</code> action.<span class="intersentencespace"></span> <span style="color: red"><span class="sc"></span><span class="sc"><strong>red</strong></span><span class="sc"></span></span><span class="break"></span> <span class="filepath">app/controllers/static_pages_controller.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">StaticPagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

  <span class="k">def</span> <span class="nf">home</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">help</span>
  <span class="k">end</span>

<span class="hll">  <span class="k">def</span> <span class="nf">about</span>
</span><span class="hll">  <span class="k">end</span>
</span><span class="k">end</span>
</pre></div></div></div><p>As before, our test suite is still <span style="color: red"><span class="sc"></span><span class="sc"><strong>red</strong></span><span class="sc"></span></span>, but the error message has changed again:</p>
<div class="code"><div class="highlight"><pre>$ bundle exec rake test
ActionView::MissingTemplate: Missing template static_pages/about
</pre></div></div>
<p>This indicates a missing template, which in the context of Rails is essentially the same thing as a view.<span class="intersentencespace"></span> As described in <a href="static_pages_fragment.html#sec-generated_static_pages" class="hyperref">Section <span class="ref">3.2.1</span></a>, an action called <code>home</code> is associated with a view called <code>home.html.erb</code> located in the <code>app/views/static_pages</code> directory, which means that we need to create a new file called <code>about.html.erb</code> in the same directory.</p>
<p>The way to create a file varies by system setup, but most text editors will let you control-click inside the directory where you want to create the file to bring up a menu with a “New File” menu item.<span class="intersentencespace"></span> Alternately, you can use the File menu to create a new file and then pick the proper directory when saving it.<span class="intersentencespace"></span> Finally, you can use my favorite trick by applying the <a href="http://en.wikipedia.org/wiki/Touch_(Unix)" target="_blank">Unix touch command</a> as follows:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> touch app/views/static_pages/about.html.erb
</pre></div></div>
<p>Although <code>touch</code> is designed to update the modification timestamp of a file or directory without otherwise affecting it, as a side-effect it creates a new (blank) file if one doesn’t already exist.<span class="intersentencespace"></span> (If using the cloud IDE, you may have to refresh the file tree as described in <a href="beginning_fragment.html#sec-bundler" class="hyperref">Section <span class="ref">1.3.1</span></a>.)</p>
<p>Once you’ve created the <code>about.html.erb</code> file in the right directory, you should fill it with the contents shown in <a href="static_pages_fragment.html#code-custom_about_page" class="hyperref">Listing <span class="ref">3.19</span></a>.</p>
<div class="codelisting" id="code-custom_about_page" data-tralics-id="uid273" data-number="3.19"><div class="heading"><span class="number">Listing 3.19:</span> 

<span class="description">Code for the About page.<span class="intersentencespace"></span> <span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span><span class="break"></span> <span class="filepath">app/views/static_pages/about.html.erb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>About<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;p&gt;</span>
  The <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://www.railstutorial.org/"</span><span class="nt">&gt;&lt;em&gt;</span>Ruby on Rails
  Tutorial<span class="nt">&lt;/em&gt;&lt;/a&gt;</span> is a
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://www.railstutorial.org/book"</span><span class="nt">&gt;</span>book<span class="nt">&lt;/a&gt;</span> and
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://screencasts.railstutorial.org/"</span><span class="nt">&gt;</span>screencast series<span class="nt">&lt;/a&gt;</span>
  to teach web development with
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://rubyonrails.org/"</span><span class="nt">&gt;</span>Ruby on Rails<span class="nt">&lt;/a&gt;</span>.
  This is the sample application for the tutorial.
<span class="nt">&lt;/p&gt;</span>
</pre></div></div></div><p>At this point, running <code>rake test</code> should get us back to <span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span>:</p>
<div class="codelisting" id="uid274" data-tralics-id="uid274" data-number="3.20"><div class="heading"><span class="number">Listing 3.20:</span> <span class="description"><span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span></span>
</div>

<div class="code"><div class="highlight"><pre>$ bundle exec rake test
3 tests, 3 assertions, 0 failures, 0 errors, 0 skips
</pre></div></div></div><p>Of course, it’s never a bad idea to take a look at the page in a browser to make sure our tests aren’t completely crazy (<a href="static_pages_fragment.html#fig-about_us" class="hyperref">Figure <span class="ref">3.5</span></a>).</p>
<div class="center figure" id="fig-about_us" data-tralics-id="uid275" data-number="3.5">
<div class="graphics image box"><img src="images/figures/about_us_3rd_edition.png" alt="images/figures/about_us_3rd_edition"></div><div class="caption"><span class="header">Figure 3.5: </span><span class="description">The new About page (<a href="http://localhost:3000/static_pages/about" target="_blank">/static_pages/about</a>).
</span></div></div>
</div>
<div id="sec-refactor" data-tralics-id="uid276" class="subsection" data-number="3.3.4"><h3><a href="static_pages_fragment.html#sec-refactor" class="heading hyperref"><span class="number">3.3.4 </span>Refactor</a></h3>
<p>Now that we’ve gotten to <span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span>, we are free to refactor our code with confidence.<span class="intersentencespace"></span> When developing an application, often code will start to “smell”, meaning that it gets ugly, bloated, or filled with repetition.<span class="intersentencespace"></span> The computer doesn’t care what the code looks like, of course, but humans do, so it is important to keep the code base clean by refactoring frequently.<span class="intersentencespace"></span> Although our sample app is a little too small to refactor right now, <a href="https://en.wikipedia.org/wiki/Code_smell" target="_blank">code smell</a> seeps in at every crack, and we’ll get started refactoring in <a href="static_pages_fragment.html#sec-layouts_and_embedded_ruby" class="hyperref">Section <span class="ref">3.4.3</span></a>.</p>
</div></div><div id="sec-slightly_dynamic_pages" data-tralics-id="cid19" class="section" data-number="3.4"><h2><a href="static_pages_fragment.html#sec-slightly_dynamic_pages" class="heading hyperref"><span class="number">3.4 </span>Slightly dynamic pages</a></h2>
<p>Now that we’ve created the actions and views for some static pages, we’ll make them <em>slightly</em> dynamic by adding some content that changes on a per-page basis: we’ll have the title of each page change to reflect its content.<span class="intersentencespace"></span> Whether a changing title represents <em>truly</em> dynamic content is debatable, but in any case it lays the necessary foundation for unambiguously dynamic content in <a href="sign_up_fragment.html#cha-sign_up" class="hyperref">Chapter <span class="ref">7</span></a>.</p>
<p>Our plan is to edit the Home, Help, and About pages to make page titles that change on each page.<span class="intersentencespace"></span> This will involve using the <code>&lt;title&gt;</code> tag in our page views.<span class="intersentencespace"></span> Most browsers display the contents of the title tag at the top of the browser window, and it is also important for search-engine optimization.<span class="intersentencespace"></span> We’ll be using the full “Red, Green, Refactor” cycle: first by adding simple tests for our page titles (<span style="color: red"><span class="sc"></span><span class="sc"><strong>red</strong></span><span class="sc"></span></span>), then by adding titles to each of our three pages (<span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span>), and finally using a <em>layout</em> file to eliminate duplication (Refactor).<span class="intersentencespace"></span> By the end of this section, all three of our static pages will have titles of the form “&lt;page name&gt; | Ruby on Rails Tutorial Sample App”, where the first part of the title will vary depending on the page (<a href="static_pages_fragment.html#table-static_pages" class="hyperref">Table <span class="ref">3.2</span></a>).</p>
<p>The <code>rails new</code> command (<a href="static_pages_fragment.html#code-rails_new_sample_app" class="hyperref">Listing <span class="ref">3.1</span></a>) creates a layout file by default, but it’s instructive to ignore it initially, which we can do by changing its name:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> mv app/views/layouts/application.html.erb layout_file   <span class="c"># temporary change</span>
</pre></div></div>
<p>You wouldn’t normally do this in a real application, but it’s easier to understand the purpose of the layout file if we start by disabling it.</p>
<div class="table" id="table-static_pages" data-tralics-id="uid277" data-number="3.2"><table class="tabular">
<tbody><tr class="bottom_border"><td class="align_center"><strong>Page</strong></td>
<td class="align_left"><strong>URL</strong></td>
<td class="align_left"><strong>Base title</strong></td>
<td class="align_left"><strong>Variable title</strong></td>
</tr><tr><td class="align_center">Home</td>
<td class="align_left">/static_pages/home</td>
<td class="align_left"><code>"Ruby on Rails Tutorial Sample App"</code></td>
<td class="align_left"><code>"Home"</code></td>
</tr><tr><td class="align_center">Help</td>
<td class="align_left">/static_pages/help</td>
<td class="align_left"><code>"Ruby on Rails Tutorial Sample App"</code></td>
<td class="align_left"><code>"Help"</code></td>
</tr><tr><td class="align_center">About</td>
<td class="align_left">/static_pages/about</td>
<td class="align_left"><code>"Ruby on Rails Tutorial Sample App"</code></td>
<td class="align_left"><code>"About"</code></td>
</tr></tbody></table><div class="caption"><span class="header">Table 3.2: </span><span class="description">The (mostly) static pages for the sample app.
</span></div></div>
<div id="sec-testing_titles" data-tralics-id="uid278" class="subsection" data-number="3.4.1"><h3><a href="static_pages_fragment.html#sec-testing_titles" class="heading hyperref"><span class="number">3.4.1 </span>Testing titles (Red)</a></h3>
<p>To add page titles, we need to learn (or review) the structure of a typical web page, which takes the form shown in <a href="static_pages_fragment.html#code-html_structure" class="hyperref">Listing <span class="ref">3.21</span></a>.</p>
<div class="codelisting" id="code-html_structure" data-tralics-id="uid279" data-number="3.21"><div class="heading"><span class="number">Listing 3.21:</span> 

<span class="description">The HTML structure of a typical web page.</span>
</div>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Greeting<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;p&gt;</span>Hello, world!<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div></div></div><p>The structure in <a href="static_pages_fragment.html#code-html_structure" class="hyperref">Listing <span class="ref">3.21</span></a> includes a <em>document type</em>, or doctype, declaration at the top to tell browsers which version of HTML we’re using (in this case, <a href="http://en.wikipedia.org/wiki/HTML5" target="_blank">HTML5</a>);<sup id="cha-3_footnote-ref-10" class="footnote"><a href="#cha-3_footnote-10">10</a></sup> a <code>head</code> section, in this case with “Greeting” inside a <code>title</code> tag; and a <code>body</code> section, in this case with “Hello, world!”<span class="intersentencespace"></span> inside a <code>p</code> (paragraph) tag.<span class="intersentencespace"></span> (The indentation is optional—HTML is not sensitive to whitespace, and ignores both tabs and spaces—but it makes the document’s structure easier to see.)</p>
<p>We’ll write simple tests for each of the titles in <a href="static_pages_fragment.html#table-static_pages" class="hyperref">Table <span class="ref">3.2</span></a> by combining the tests in <a href="static_pages_fragment.html#code-about_test" class="hyperref">Listing <span class="ref">3.13</span></a> with the <code>assert_select</code> method, which lets us test for the presence of a particular HTML tag (sometimes called a “selector”, hence the name):<sup id="cha-3_footnote-ref-11" class="footnote"><a href="#cha-3_footnote-11">11</a></sup></p>
<div class="code"><div class="highlight"><pre><span class="n">assert_select</span> <span class="s2">"title"</span><span class="p">,</span> <span class="s2">"Home | Ruby on Rails Tutorial Sample App"</span>
</pre></div></div>
<p>In particular, the code above checks for the presence of a <code>&lt;title&gt;</code> tag containing the string “Home | Ruby on Rails Tutorial Sample App”.<span class="intersentencespace"></span> Applying this idea to all three static pages gives the tests shown in <a href="static_pages_fragment.html#code-title_tests" class="hyperref">Listing <span class="ref">3.22</span></a>.</p>
<div class="codelisting" id="code-title_tests" data-tralics-id="uid282" data-number="3.22"><div class="heading"><span class="number">Listing 3.22:</span> 

<span class="description">The Static Pages controller test with title tests.<span class="intersentencespace"></span> <span style="color: red"><span class="sc"></span><span class="sc"><strong>red</strong></span><span class="sc"></span></span><span class="break"></span> <span class="filepath">test/controllers/static_pages_controller_test.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">'test_helper'</span>

<span class="k">class</span> <span class="nc">StaticPagesControllerTest</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">TestCase</span>

  <span class="nb">test</span> <span class="s2">"should get home"</span> <span class="k">do</span>
    <span class="n">get</span> <span class="ss">:home</span>
    <span class="n">assert_response</span> <span class="ss">:success</span>
<span class="hll">    <span class="n">assert_select</span> <span class="s2">"title"</span><span class="p">,</span> <span class="s2">"Home | Ruby on Rails Tutorial Sample App"</span>
</span>  <span class="k">end</span>

  <span class="nb">test</span> <span class="s2">"should get help"</span> <span class="k">do</span>
    <span class="n">get</span> <span class="ss">:help</span>
    <span class="n">assert_response</span> <span class="ss">:success</span>
<span class="hll">    <span class="n">assert_select</span> <span class="s2">"title"</span><span class="p">,</span> <span class="s2">"Help | Ruby on Rails Tutorial Sample App"</span>
</span>  <span class="k">end</span>

  <span class="nb">test</span> <span class="s2">"should get about"</span> <span class="k">do</span>
    <span class="n">get</span> <span class="ss">:about</span>
    <span class="n">assert_response</span> <span class="ss">:success</span>
<span class="hll">    <span class="n">assert_select</span> <span class="s2">"title"</span><span class="p">,</span> <span class="s2">"About | Ruby on Rails Tutorial Sample App"</span>
</span>  <span class="k">end</span>
<span class="k">end</span>
</pre></div></div></div><p>(If the repetition of the base title “Ruby on Rails Tutorial Sample App” bothers you, see the exercises in <a href="static_pages_fragment.html#sec-static_pages_exercises" class="hyperref">Section <span class="ref">3.6</span></a>.)</p>
<p>With the tests from <a href="static_pages_fragment.html#code-title_tests" class="hyperref">Listing <span class="ref">3.22</span></a> in place, you should verify that the test suite is currently <span style="color: red"><span class="sc"></span><span class="sc"><strong>red</strong></span><span class="sc"></span></span>:</p>
<div class="codelisting" id="uid283" data-tralics-id="uid283" data-number="3.23"><div class="heading"><span class="number">Listing 3.23:</span> <span class="description"><span style="color: red"><span class="sc"></span><span class="sc"><strong>red</strong></span><span class="sc"></span></span></span>
</div>

<div class="code"><div class="highlight"><pre>$ bundle exec rake test
3 tests, 6 assertions, 3 failures, 0 errors, 0 skips
</pre></div></div></div></div>
<div id="sec-adding_page_titles" data-tralics-id="uid284" class="subsection" data-number="3.4.2"><h3><a href="static_pages_fragment.html#sec-adding_page_titles" class="heading hyperref"><span class="number">3.4.2 </span>Adding page titles (Green)</a></h3>
<p>Now we’ll add a title to each page, getting the tests from <a href="static_pages_fragment.html#sec-testing_titles" class="hyperref">Section <span class="ref">3.4.1</span></a> to pass in the process.<span class="intersentencespace"></span> Applying the basic HTML structure from <a href="static_pages_fragment.html#code-html_structure" class="hyperref">Listing <span class="ref">3.21</span></a> to the custom Home page from <a href="static_pages_fragment.html#code-custom_home_page" class="hyperref">Listing <span class="ref">3.9</span></a> yields <a href="static_pages_fragment.html#code-home_view_full_html" class="hyperref">Listing <span class="ref">3.24</span></a>.</p>
<div class="codelisting" id="code-home_view_full_html" data-tralics-id="uid285" data-number="3.24"><div class="heading"><span class="number">Listing 3.24:</span> 

<span class="description">The view for the Home page with full HTML structure.<span class="intersentencespace"></span> <span style="color: red"><span class="sc"></span><span class="sc"><strong>red</strong></span><span class="sc"></span></span><span class="break"></span> <span class="filepath">app/views/static_pages/home.html.erb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Home | Ruby on Rails Tutorial Sample App<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Sample App<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;p&gt;</span>
      This is the home page for the
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://www.railstutorial.org/"</span><span class="nt">&gt;</span>Ruby on Rails Tutorial<span class="nt">&lt;/a&gt;</span>
      sample application.
    <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div></div></div><p>The corresponding web page appears in <a href="static_pages_fragment.html#fig-home_view_full_html" class="hyperref">Figure <span class="ref">3.6</span></a>.<sup id="cha-3_footnote-ref-12" class="footnote"><a href="#cha-3_footnote-12">12</a></sup></p>
<div class="center figure" id="fig-home_view_full_html" data-tralics-id="uid287" data-number="3.6">
<div class="graphics image"><img src="images/figures/home_view_full_html.png" alt="images/figures/home_view_full_html"></div><div class="caption"><span class="header">Figure 3.6: </span><span class="description">The Home page with a title.
</span></div></div>
<p>Following this model for the Help page (<a href="static_pages_fragment.html#code-custom_help_page" class="hyperref">Listing <span class="ref">3.10</span></a>) and the About page (<a href="static_pages_fragment.html#code-custom_about_page" class="hyperref">Listing <span class="ref">3.19</span></a>) yields the code in <a href="static_pages_fragment.html#code-help_view_full_html" class="hyperref">Listing <span class="ref">3.25</span></a> and <a href="static_pages_fragment.html#code-about_view_full_html" class="hyperref">Listing <span class="ref">3.26</span></a>.</p>
<div class="codelisting" id="code-help_view_full_html" data-tralics-id="uid288" data-number="3.25"><div class="heading"><span class="number">Listing 3.25:</span> 

<span class="description">The view for the Help page with full HTML structure.<span class="intersentencespace"></span> <span style="color: red"><span class="sc"></span><span class="sc"><strong>red</strong></span><span class="sc"></span></span><span class="break"></span> <span class="filepath">app/views/static_pages/help.html.erb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Help | Ruby on Rails Tutorial Sample App<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Help<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;p&gt;</span>
      Get help on the Ruby on Rails Tutorial at the
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://www.railstutorial.org/#help"</span><span class="nt">&gt;</span>Rails Tutorial help
      section<span class="nt">&lt;/a&gt;</span>.
      To get help on this sample app, see the
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://www.railstutorial.org/book"</span><span class="nt">&gt;&lt;em&gt;</span>Ruby on Rails
      Tutorial<span class="nt">&lt;/em&gt;</span> book<span class="nt">&lt;/a&gt;</span>.
    <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div></div></div><div class="codelisting" id="code-about_view_full_html" data-tralics-id="uid289" data-number="3.26"><div class="heading"><span class="number">Listing 3.26:</span> 

<span class="description">The view for the About page with full HTML structure.<span class="intersentencespace"></span> <span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span><span class="break"></span> <span class="filepath">app/views/static_pages/about.html.erb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>About | Ruby on Rails Tutorial Sample App<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>About<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;p&gt;</span>
      The <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://www.railstutorial.org/"</span><span class="nt">&gt;&lt;em&gt;</span>Ruby on Rails
      Tutorial<span class="nt">&lt;/em&gt;&lt;/a&gt;</span> is a
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://www.railstutorial.org/book"</span><span class="nt">&gt;</span>book<span class="nt">&lt;/a&gt;</span> and
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://screencasts.railstutorial.org/"</span><span class="nt">&gt;</span>screencast series<span class="nt">&lt;/a&gt;</span>
      to teach web development with
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://rubyonrails.org/"</span><span class="nt">&gt;</span>Ruby on Rails<span class="nt">&lt;/a&gt;</span>.
      This is the sample application for the tutorial.
    <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div></div></div><p>At this point, the test suite should be back to <span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span>:</p>
<div class="codelisting" id="uid290" data-tralics-id="uid290" data-number="3.27"><div class="heading"><span class="number">Listing 3.27:</span> <span class="description"><span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span></span>
</div>

<div class="code"><div class="highlight"><pre>$ bundle exec rake test
3 tests, 6 assertions, 0 failures, 0 errors, 0 skips
</pre></div></div></div></div>
<div id="sec-layouts_and_embedded_ruby" data-tralics-id="uid291" class="subsection" data-number="3.4.3"><h3><a href="static_pages_fragment.html#sec-layouts_and_embedded_ruby" class="heading hyperref"><span class="number">3.4.3 </span>Layouts and embedded Ruby (Refactor)</a></h3>
<p>We’ve achieved a lot already in this section, generating three valid pages using Rails controllers and actions, but they are purely static HTML and hence don’t show off the power of Rails.<span class="intersentencespace"></span> Moreover, they suffer from terrible duplication:</p>
<ul>
<li>The page titles are almost (but not quite) exactly the same.<span class="intersentencespace"></span>
</li>
<li>“Ruby on Rails Tutorial Sample App” is common to all three titles.<span class="intersentencespace"></span>
</li>
<li>The entire HTML skeleton structure is repeated on each page.<span class="intersentencespace"></span>
</li></ul>
<p>This repeated code is a violation of the important “Don’t Repeat Yourself” (DRY) principle; in this section we’ll “DRY out our code” by removing the repetition.<span class="intersentencespace"></span> At the end, we’ll re-run the tests from <a href="static_pages_fragment.html#sec-adding_page_titles" class="hyperref">Section <span class="ref">3.4.2</span></a> to verify that the titles are still correct.</p>
<p>Paradoxically, we’ll take the first step toward eliminating duplication by first adding some more: we’ll make the titles of the pages, which are currently quite similar, match <em>exactly</em>.<span class="intersentencespace"></span> This will make it much simpler to remove all the repetition at a stroke.</p>
<p>The technique involves using <em>embedded Ruby</em> in our views.<span class="intersentencespace"></span> Since the Home, Help, and About page titles have a variable component, we’ll use a special Rails function called <code>provide</code> to set a different title on each page.<span class="intersentencespace"></span> We can see how this works by replacing the literal title “Home” in the <code>home.html.erb</code> view with the code in <a href="static_pages_fragment.html#code-home_view_erb_title" class="hyperref">Listing <span class="ref">3.28</span></a>.</p>
<div class="codelisting" id="code-home_view_erb_title" data-tralics-id="uid295" data-number="3.28"><div class="heading"><span class="number">Listing 3.28:</span> 

<span class="description">The view for the Home page with an embedded Ruby title.<span class="intersentencespace"></span> <span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span><span class="break"></span> <span class="filepath">app/views/static_pages/home.html.erb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="hll"><span class="cp">&lt;%</span> <span class="n">provide</span><span class="p">(</span><span class="ss">:title</span><span class="p">,</span> <span class="s2">"Home"</span><span class="p">)</span> <span class="cp">%&gt;</span>
</span><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
<span class="hll">    <span class="nt">&lt;title&gt;</span><span class="cp">&lt;%=</span> <span class="k">yield</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span> <span class="cp">%&gt;</span> | Ruby on Rails Tutorial Sample App<span class="nt">&lt;/title&gt;</span>
</span>  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Sample App<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;p&gt;</span>
      This is the home page for the
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://www.railstutorial.org/"</span><span class="nt">&gt;</span>Ruby on Rails Tutorial<span class="nt">&lt;/a&gt;</span>
      sample application.
    <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div></div></div><p><a href="static_pages_fragment.html#code-home_view_erb_title" class="hyperref">Listing <span class="ref">3.28</span></a> is our first example of embedded Ruby, also called <em>ERb</em>.<span class="intersentencespace"></span> (Now you know why HTML views have the file extension <code>.html.erb</code>.)<span class="intersentencespace"></span> ERb is the primary template system for including dynamic content in web pages.<sup id="cha-3_footnote-ref-13" class="footnote"><a href="#cha-3_footnote-13">13</a></sup><span class="intersentencespace"></span> The code</p>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;%</span> <span class="n">provide</span><span class="p">(</span><span class="ss">:title</span><span class="p">,</span> <span class="s2">"Home"</span><span class="p">)</span> <span class="cp">%&gt;</span>
</pre></div></div>
<p>indicates using <span class="inline_verbatim">&lt;% ... %&gt;</span> that Rails should call the <code>provide</code> function and associate the string <code>"Home"</code> with the label <code>:title</code>.<sup id="cha-3_footnote-ref-14" class="footnote"><a href="#cha-3_footnote-14">14</a></sup><span class="intersentencespace"></span> Then, in the title, we use the closely related notation <span class="inline_verbatim">&lt;%= ... %&gt;</span> to insert the title into the template using Ruby’s <code>yield</code> function:<sup id="cha-3_footnote-ref-15" class="footnote"><a href="#cha-3_footnote-15">15</a></sup></p>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;title&gt;</span><span class="cp">&lt;%=</span> <span class="k">yield</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span> <span class="cp">%&gt;</span> | Ruby on Rails Tutorial Sample App<span class="nt">&lt;/title&gt;</span>
</pre></div></div>
<p>(The distinction between the two types of embedded Ruby is that <span class="inline_verbatim">&lt;% ... %&gt;</span> <em>executes</em> the code inside, while <span class="inline_verbatim">&lt;%= ... %&gt;</span> executes it <em>and inserts</em> the result into the template.)<span class="intersentencespace"></span> The resulting page is exactly the same as before, only now the variable part of the title is generated dynamically by ERb.</p>
<p>We can verify that all this works by running the tests from <a href="static_pages_fragment.html#sec-adding_page_titles" class="hyperref">Section <span class="ref">3.4.2</span></a> and see that they are still <span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span>:</p>
<div class="codelisting" id="uid299" data-tralics-id="uid299" data-number="3.29"><div class="heading"><span class="number">Listing 3.29:</span> <span class="description"><span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span></span>
</div>

<div class="code"><div class="highlight"><pre>$ bundle exec rake test
3 tests, 6 assertions, 0 failures, 0 errors, 0 skips
</pre></div></div></div><p>Then we can make the corresponding replacements for the Help and About pages (<a href="static_pages_fragment.html#code-help_view_erb_title" class="hyperref">Listing <span class="ref">3.30</span></a> and <a href="static_pages_fragment.html#code-about_view_erb_title" class="hyperref">Listing <span class="ref">3.31</span></a>).</p>
<div class="codelisting" id="code-help_view_erb_title" data-tralics-id="uid300" data-number="3.30"><div class="heading"><span class="number">Listing 3.30:</span> 

<span class="description">The view for the Help page with an embedded Ruby title.<span class="intersentencespace"></span> <span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span><span class="break"></span> <span class="filepath">app/views/static_pages/help.html.erb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="hll"><span class="cp">&lt;%</span> <span class="n">provide</span><span class="p">(</span><span class="ss">:title</span><span class="p">,</span> <span class="s2">"Help"</span><span class="p">)</span> <span class="cp">%&gt;</span>
</span><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
<span class="hll">    <span class="nt">&lt;title&gt;</span><span class="cp">&lt;%=</span> <span class="k">yield</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span> <span class="cp">%&gt;</span> | Ruby on Rails Tutorial Sample App<span class="nt">&lt;/title&gt;</span>
</span>  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Help<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;p&gt;</span>
      Get help on the Ruby on Rails Tutorial at the
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://www.railstutorial.org/#help"</span><span class="nt">&gt;</span>Rails Tutorial help
      section<span class="nt">&lt;/a&gt;</span>.
      To get help on this sample app, see the
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://www.railstutorial.org/book"</span><span class="nt">&gt;&lt;em&gt;</span>Ruby on Rails
      Tutorial<span class="nt">&lt;/em&gt;</span> book<span class="nt">&lt;/a&gt;</span>.
    <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div></div></div><div class="codelisting" id="code-about_view_erb_title" data-tralics-id="uid301" data-number="3.31"><div class="heading"><span class="number">Listing 3.31:</span> 

<span class="description">The view for the About page with an embedded Ruby title.<span class="intersentencespace"></span> <span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span><span class="break"></span> <span class="filepath">app/views/static_pages/about.html.erb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="hll"><span class="cp">&lt;%</span> <span class="n">provide</span><span class="p">(</span><span class="ss">:title</span><span class="p">,</span> <span class="s2">"About"</span><span class="p">)</span> <span class="cp">%&gt;</span>
</span><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
<span class="hll">    <span class="nt">&lt;title&gt;</span><span class="cp">&lt;%=</span> <span class="k">yield</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span> <span class="cp">%&gt;</span> | Ruby on Rails Tutorial Sample App<span class="nt">&lt;/title&gt;</span>
</span>  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>About<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;p&gt;</span>
      The <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://www.railstutorial.org/"</span><span class="nt">&gt;&lt;em&gt;</span>Ruby on Rails
      Tutorial<span class="nt">&lt;/em&gt;&lt;/a&gt;</span> is a
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://www.railstutorial.org/book"</span><span class="nt">&gt;</span>book<span class="nt">&lt;/a&gt;</span> and
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://screencasts.railstutorial.org/"</span><span class="nt">&gt;</span>screencast series<span class="nt">&lt;/a&gt;</span>
      to teach web development with
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://rubyonrails.org/"</span><span class="nt">&gt;</span>Ruby on Rails<span class="nt">&lt;/a&gt;</span>.
      This is the sample application for the tutorial.
    <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div></div></div><p>Now that we’ve replaced the variable part of the page titles with ERb, each of our pages looks something like this:</p>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;%</span> <span class="n">provide</span><span class="p">(</span><span class="ss">:title</span><span class="p">,</span> <span class="s2">"The Title"</span><span class="p">)</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span><span class="cp">&lt;%=</span> <span class="k">yield</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span> <span class="cp">%&gt;</span> | Ruby on Rails Tutorial Sample App<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    Contents
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div></div>
<p>In other words, all the pages are identical in structure, including the contents of the title tag, with the sole exception of the material inside the <code>body</code> tag.</p>
<p>In order to factor out this common structure, Rails comes with a special <em>layout</em> file called <code>application.html.erb</code>, which we renamed in the beginning of this section (<a href="static_pages_fragment.html#sec-slightly_dynamic_pages" class="hyperref">Section <span class="ref">3.4</span></a>) and which we’ll now restore:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> mv layout_file app/views/layouts/application.html.erb
</pre></div></div>
<p>To get the layout to work, we have to replace the default title with the embedded Ruby from the examples above:</p>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;title&gt;</span><span class="cp">&lt;%=</span> <span class="k">yield</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span> <span class="cp">%&gt;</span> | Ruby on Rails Tutorial Sample App<span class="nt">&lt;/title&gt;</span>
</pre></div></div>
<p>The resulting layout appears in <a href="static_pages_fragment.html#code-application_layout" class="hyperref">Listing <span class="ref">3.32</span></a>.</p>
<div class="codelisting" id="code-application_layout" data-tralics-id="uid302" data-number="3.32"><div class="heading"><span class="number">Listing 3.32:</span> 

<span class="description">The sample application site layout.<span class="intersentencespace"></span> <span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span><span class="break"></span> <span class="filepath">app/views/layouts/application.html.erb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
<span class="hll">    <span class="nt">&lt;title&gt;</span><span class="cp">&lt;%=</span> <span class="k">yield</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span> <span class="cp">%&gt;</span> | Ruby on Rails Tutorial Sample App<span class="nt">&lt;/title&gt;</span>
</span>    <span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span>    <span class="s1">'application'</span><span class="p">,</span> <span class="ss">media</span><span class="p">:</span> <span class="s1">'all'</span><span class="p">,</span>
                                              <span class="s1">'data-turbolinks-track'</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="cp">%&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">javascript_include_tag</span> <span class="s1">'application'</span><span class="p">,</span> <span class="s1">'data-turbolinks-track'</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="cp">%&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">csrf_meta_tags</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div></div></div><p>Note here the special line</p>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span>
</pre></div></div>
<p>This code is responsible for inserting the contents of each page into the layout.<span class="intersentencespace"></span> It’s not important to know exactly how this works; what matters is that using this layout ensures that, for example, visiting the page /static_pages/home converts the contents of <code>home.html.erb</code> to HTML and then inserts it in place of <span class="inline_verbatim">&lt;%= yield %&gt;</span>.</p>
<p>It’s also worth noting that the default Rails layout includes several additional lines:</p>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">javascript_include_tag</span> <span class="s2">"application"</span><span class="p">,</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">csrf_meta_tags</span> <span class="cp">%&gt;</span>
</pre></div></div>
<p>This code arranges to include the application stylesheet and JavaScript, which are part of the asset pipeline (<a href="filling_in_the_layout_fragment.html#sec-the_asset_pipeline" class="hyperref">Section <span class="ref">5.2.1</span></a>), together with the Rails method <code>csrf_meta_tags</code>, which prevents <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery" target="_blank">cross-site request forgery</a> (CSRF), a type of malicious web attack.</p>
<p>Of course, the views in <a href="static_pages_fragment.html#code-home_view_erb_title" class="hyperref">Listing <span class="ref">3.28</span></a>, <a href="static_pages_fragment.html#code-help_view_erb_title" class="hyperref">Listing <span class="ref">3.30</span></a>, and <a href="static_pages_fragment.html#code-about_view_erb_title" class="hyperref">Listing <span class="ref">3.31</span></a> are still filled with all the HTML structure included in the layout, so we have to remove it, leaving only the interior contents.<span class="intersentencespace"></span> The resulting cleaned-up views appear in <a href="static_pages_fragment.html#code-home_view_interior" class="hyperref">Listing <span class="ref">3.33</span></a>, <a href="static_pages_fragment.html#code-help_view_interior" class="hyperref">Listing <span class="ref">3.34</span></a>, and <a href="static_pages_fragment.html#code-about_view_interior" class="hyperref">Listing <span class="ref">3.35</span></a>.</p>
<div class="codelisting" id="code-home_view_interior" data-tralics-id="uid303" data-number="3.33"><div class="heading"><span class="number">Listing 3.33:</span> 

<span class="description">The Home page with HTML structure removed.<span class="intersentencespace"></span> <span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span><span class="break"></span> <span class="filepath">app/views/static_pages/home.html.erb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%</span> <span class="n">provide</span><span class="p">(</span><span class="ss">:title</span><span class="p">,</span> <span class="s2">"Home"</span><span class="p">)</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;h1&gt;</span>Sample App<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;p&gt;</span>
  This is the home page for the
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://www.railstutorial.org/"</span><span class="nt">&gt;</span>Ruby on Rails Tutorial<span class="nt">&lt;/a&gt;</span>
  sample application.
<span class="nt">&lt;/p&gt;</span>
</pre></div></div></div><div class="codelisting" id="code-help_view_interior" data-tralics-id="uid304" data-number="3.34"><div class="heading"><span class="number">Listing 3.34:</span> 

<span class="description">The Help page with HTML structure removed.<span class="intersentencespace"></span> <span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span><span class="break"></span> <span class="filepath">app/views/static_pages/help.html.erb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%</span> <span class="n">provide</span><span class="p">(</span><span class="ss">:title</span><span class="p">,</span> <span class="s2">"Help"</span><span class="p">)</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;h1&gt;</span>Help<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;p&gt;</span>
  Get help on the Ruby on Rails Tutorial at the
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://www.railstutorial.org/#help"</span><span class="nt">&gt;</span>Rails Tutorial help section<span class="nt">&lt;/a&gt;</span>.
  To get help on this sample app, see the
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://www.railstutorial.org/book"</span><span class="nt">&gt;&lt;em&gt;</span>Ruby on Rails Tutorial<span class="nt">&lt;/em&gt;</span>
  book<span class="nt">&lt;/a&gt;</span>.
<span class="nt">&lt;/p&gt;</span>
</pre></div></div></div><div class="codelisting" id="code-about_view_interior" data-tralics-id="uid305" data-number="3.35"><div class="heading"><span class="number">Listing 3.35:</span> 

<span class="description">The About page with HTML structure removed.<span class="intersentencespace"></span> <span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span><span class="break"></span> <span class="filepath">app/views/static_pages/about.html.erb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%</span> <span class="n">provide</span><span class="p">(</span><span class="ss">:title</span><span class="p">,</span> <span class="s2">"About"</span><span class="p">)</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;h1&gt;</span>About<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;p&gt;</span>
  The <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://www.railstutorial.org/"</span><span class="nt">&gt;&lt;em&gt;</span>Ruby on Rails
  Tutorial<span class="nt">&lt;/em&gt;&lt;/a&gt;</span> is a
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://www.railstutorial.org/book"</span><span class="nt">&gt;</span>book<span class="nt">&lt;/a&gt;</span> and
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://screencasts.railstutorial.org/"</span><span class="nt">&gt;</span>screencast series<span class="nt">&lt;/a&gt;</span>
  to teach web development with
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://rubyonrails.org/"</span><span class="nt">&gt;</span>Ruby on Rails<span class="nt">&lt;/a&gt;</span>.
  This is the sample application for the tutorial.
<span class="nt">&lt;/p&gt;</span>
</pre></div></div></div><p>With these views defined, the Home, Help, and About pages are the same as before, but they have much less duplication.</p>
<p>Experience shows that even fairly simple refactoring is error-prone and can easily go awry.<span class="intersentencespace"></span> This is one reason why having a good test suite is so valuable.<span class="intersentencespace"></span> Rather than double-checking every page for correctness—a procedure that isn’t too hard early on but rapidly becomes unwieldy as an application grows—we can simply verify that the test suite is still <span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span>:</p>
<div class="codelisting" id="uid306" data-tralics-id="uid306" data-number="3.36"><div class="heading"><span class="number">Listing 3.36:</span> <span class="description"><span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span></span>
</div>

<div class="code"><div class="highlight"><pre>$ bundle exec rake test
3 tests, 6 assertions, 0 failures, 0 errors, 0 skips
</pre></div></div></div><p>This isn’t a <em>proof</em> that our code is still correct, but it greatly increases the probability, thereby providing a safety net to protect us against future bugs.</p>
</div>
<div id="sec-setting_the_root_route" data-tralics-id="uid307" class="subsection" data-number="3.4.4"><h3><a href="static_pages_fragment.html#sec-setting_the_root_route" class="heading hyperref"><span class="number">3.4.4 </span>Setting the root route</a></h3>
<p>Now that we’ve customized our site’s pages and gotten a good start on the test suite, let’s set the application’s root route before moving on.<span class="intersentencespace"></span> As in <a href="beginning_fragment.html#sec-hello_world" class="hyperref">Section <span class="ref">1.3.4</span></a> and <a href="toy_app_fragment.html#sec-mvc_in_action" class="hyperref">Section <span class="ref">2.2.2</span></a>, this involves editing the <code>routes.rb</code> file to connect / to a page of our choice, which in this case will be the Home page.<span class="intersentencespace"></span> (At this point, I also recommend removing the <code>hello</code> action from the Application controller if you added it in <a href="static_pages_fragment.html#sec-sample_app_setup" class="hyperref">Section <span class="ref">3.1</span></a>.)<span class="intersentencespace"></span> As shown in <a href="static_pages_fragment.html#code-home_root_route" class="hyperref">Listing <span class="ref">3.37</span></a>, this means replacing the generated <code>get</code> rule from <a href="static_pages_fragment.html#code-pages_routes" class="hyperref">Listing <span class="ref">3.5</span></a> with the following code:</p>
<div class="code"><div class="highlight"><pre><span class="n">root</span> <span class="s1">'static_pages#home'</span>
</pre></div></div>
<p>This changes the URL <code>static_pages/home</code> to the controller/action pair <code>static_pages#home</code>, which ensures that <span class="tt">GET</span> requests for / get routed to the <code>home</code> action in the Static Pages controller.<span class="intersentencespace"></span> The resulting routes file is shown in <a href="static_pages_fragment.html#fig-home_root_route" class="hyperref">Figure <span class="ref">3.7</span></a>.<span class="intersentencespace"></span> (Note that, with the code in <a href="static_pages_fragment.html#code-home_root_route" class="hyperref">Listing <span class="ref">3.37</span></a>, the previous route <code>static_pages/home</code> will no longer work.)</p>
<div class="codelisting" id="code-home_root_route" data-tralics-id="uid308" data-number="3.37"><div class="heading"><span class="number">Listing 3.37:</span> 

<span class="description">Setting the root route to the Home page.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">config/routes.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
<span class="hll">  <span class="n">root</span> <span class="s1">'static_pages#home'</span>
</span>  <span class="n">get</span>  <span class="s1">'static_pages/help'</span>
  <span class="n">get</span>  <span class="s1">'static_pages/about'</span>
<span class="k">end</span>
</pre></div></div></div><div class="center figure" id="fig-home_root_route" data-tralics-id="uid309" data-number="3.7">
<div class="graphics image"><img src="images/figures/home_root_route.png" alt="images/figures/home_root_route"></div><div class="caption"><span class="header">Figure 3.7: </span><span class="description">The Home page at the root route.
</span></div></div>
</div></div><div id="sec-static_pages_conclusion" data-tralics-id="cid20" class="section" data-number="3.5"><h2><a href="static_pages_fragment.html#sec-static_pages_conclusion" class="heading hyperref"><span class="number">3.5 </span>Conclusion</a></h2>
<p>Seen from the outside, this chapter hardly accomplished anything: we started with static pages, and ended with…<em>mostly</em> static pages.<span class="intersentencespace"></span> But appearances are deceiving: by developing in terms of Rails controllers, actions, and views, we are now in a position to add arbitrary amounts of dynamic content to our site.<span class="intersentencespace"></span> Seeing exactly how this plays out is the task for the rest of this tutorial.</p>
<p>Before moving on, let’s take a minute to commit the changes on our topic branch and merge them into the master branch.<span class="intersentencespace"></span> Back in <a href="static_pages_fragment.html#sec-static_pages" class="hyperref">Section <span class="ref">3.2</span></a> we created a Git branch for the development of static pages.<span class="intersentencespace"></span> If you haven’t been making commits as we’ve been moving along, first make a commit indicating that we’ve reached a stopping point:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git add -A
<span class="gp">$</span> git commit -m <span class="s2">"Finish static pages"</span>
</pre></div></div>
<p>Then merge the changes back into the master branch using the same technique as in <a href="beginning_fragment.html#sec-git_commands" class="hyperref">Section <span class="ref">1.4.4</span></a>:<sup id="cha-3_footnote-ref-16" class="footnote"><a href="#cha-3_footnote-16">16</a></sup></p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git checkout master
<span class="gp">$</span> git merge static-pages
</pre></div></div>
<p>Once you reach a stopping point like this, it’s usually a good idea to push your code up to a remote repository (which, if you followed the steps in <a href="beginning_fragment.html#sec-bitbucket" class="hyperref">Section <span class="ref">1.4.3</span></a>, will be Bitbucket):</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git push
</pre></div></div>
<p>I also recommend deploying the application to Heroku:</p>
<div class="code"><div class="highlight"><pre>$ bundle exec rake test
$ git push heroku
</pre></div></div>
<p>Here we’ve taken care to run the test suite before deploying, which is a good habit to develop.</p>
<div id="sec-static_pages_what_we_learned_in_this_chapter" data-tralics-id="uid311" class="subsection" data-number="3.5.1"><h3><a href="static_pages_fragment.html#sec-static_pages_what_we_learned_in_this_chapter" class="heading hyperref"><span class="number">3.5.1 </span>What we learned in this chapter</a></h3>
<ul>
<li>For a third time, we went through the full procedure of creating a new Rails application from scratch, installing the necessary gems, pushing it up to a remote repository, and deploying it to production.
</li>
<li>The <code>rails</code> script generates a new controller with <code>rails generate controller ControllerName &lt;optional action names&gt;</code>.
</li>
<li>New routes are defined in the file <code>config/routes.rb</code>.
</li>
<li>Rails views can contain static HTML or embedded Ruby (ERb).
</li>
<li>Automated testing allows us to write test suites that drive the development of new features, allow for confident refactoring, and catch regressions.
</li>
<li>Test-driven development uses a “Red, Green, Refactor” cycle.
</li>
<li>Rails layouts allow the use of a common template for pages in our application, thereby eliminating duplication.
</li></ul>
</div></div><div id="sec-static_pages_exercises" data-tralics-id="cid21" class="section" data-number="3.6"><h2><a href="static_pages_fragment.html#sec-static_pages_exercises" class="heading hyperref"><span class="number">3.6 </span>Exercises</a></h2>
<p><em>Note</em>: The <em>Solutions Manual for Exercises</em>, with solutions to every exercise in the <em>Ruby on Rails Tutorial</em> book, is included for free with every purchase at <a href="http://www.railstutorial.org/" target="_blank">www.railstutorial.org</a>.</p>
<p>From this point until the end of the tutorial, I recommend solving the exercises on a separate topic branch:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git checkout static-pages
<span class="gp">$</span> git checkout -b static-pages-exercises
</pre></div></div>
<p>This practice will prevent conflicts with the main tutorial.</p>
<p>Once you’re satisfied with your solutions, you can push up the exercises branch to a remote repository (if you’ve set one up):</p>
<div class="code"><div class="highlight"><pre><span class="go">&lt;solve first exercise&gt;</span>
<span class="gp">$</span> git commit -am <span class="s2">"Eliminate repetition (solves exercise 3.1)"</span>
<span class="go">&lt;solve second exercise&gt;</span>
<span class="gp">$</span> git add -A
<span class="gp">$</span> git commit -m <span class="s2">"Add a Contact page (solves exercise 3.2)"</span>
<span class="gp">$</span> git push -u origin static-pages-exercises
<span class="gp">$</span> git checkout master
</pre></div></div>
<p>(As preparation for future development, the last step here checks out the master branch, but we <em>don’t</em> merge in the changes in order to avoid conflicts with the rest of the tutorial.)<span class="intersentencespace"></span> In future chapters, the branches and commit messages will differ, of course, but the basic idea is the same.</p>
<ol>
<li>You may have noticed some repetition in the Static Pages controller test (<a href="static_pages_fragment.html#code-title_tests" class="hyperref">Listing <span class="ref">3.22</span></a>).<span class="intersentencespace"></span> In particular, the base title, “Ruby on Rails Tutorial Sample App”, is the same for every title test.<span class="intersentencespace"></span> Using the special function <code>setup</code>, which is automatically run before every test, verify that the tests in <a href="static_pages_fragment.html#code-base_title_test" class="hyperref">Listing <span class="ref">3.38</span></a> are still <span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span>.<span class="intersentencespace"></span> (<a href="static_pages_fragment.html#code-base_title_test" class="hyperref">Listing <span class="ref">3.38</span></a> uses an <em>instance variable</em>, seen briefly in <a href="toy_app_fragment.html#sec-mvc_in_action" class="hyperref">Section <span class="ref">2.2.2</span></a> and covered further in <a href="rails_flavored_ruby_fragment.html#sec-a_user_class" class="hyperref">Section <span class="ref">4.4.5</span></a>, combined with <em>string interpolation</em>, which is covered further in <a href="rails_flavored_ruby_fragment.html#sec-strings" class="hyperref">Section <span class="ref">4.2.2</span></a>.)
</li>
<li>Make a Contact page for the sample app.<sup id="cha-3_footnote-ref-17" class="footnote"><a href="#cha-3_footnote-17">17</a></sup><span class="intersentencespace"></span> Following the model in <a href="static_pages_fragment.html#code-about_test" class="hyperref">Listing <span class="ref">3.13</span></a>, first write a test for the existence of a page at the URL /static_pages/contact by testing for the title “Contact | Ruby on Rails Tutorial Sample App”.<span class="intersentencespace"></span> Get your test to pass by following the same steps as when making the About page in <a href="static_pages_fragment.html#sec-green" class="hyperref">Section <span class="ref">3.3.3</span></a>, including filling the Contact page with the content from <a href="static_pages_fragment.html#code-proposed_contact_page" class="hyperref">Listing <span class="ref">3.39</span></a>.<span class="intersentencespace"></span> (Note that, to keep the exercises independent, <a href="static_pages_fragment.html#code-proposed_contact_page" class="hyperref">Listing <span class="ref">3.39</span></a> doesn’t incorporate the changes made in <a href="static_pages_fragment.html#code-base_title_test" class="hyperref">Listing <span class="ref">3.38</span></a>.)
</li></ol>
<div class="codelisting" id="code-base_title_test" data-tralics-id="uid322" data-number="3.38"><div class="heading"><span class="number">Listing 3.38:</span> 

<span class="description">The Static Pages controller test with a base title.<span class="intersentencespace"></span> <span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span><span class="break"></span> <span class="filepath">test/controllers/static_pages_controller_test.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">'test_helper'</span>

<span class="k">class</span> <span class="nc">StaticPagesControllerTest</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">TestCase</span>

<span class="hll">  <span class="k">def</span> <span class="nf">setup</span>
</span><span class="hll">    <span class="vi">@base_title</span> <span class="o">=</span> <span class="s2">"Ruby on Rails Tutorial Sample App"</span>
</span><span class="hll">  <span class="k">end</span>
</span>
  <span class="nb">test</span> <span class="s2">"should get home"</span> <span class="k">do</span>
    <span class="n">get</span> <span class="ss">:home</span>
    <span class="n">assert_response</span> <span class="ss">:success</span>
<span class="hll">    <span class="n">assert_select</span> <span class="s2">"title"</span><span class="p">,</span> <span class="s2">"Home | </span><span class="si">#{</span><span class="vi">@base_title</span><span class="si">}</span><span class="s2">"</span>
</span>  <span class="k">end</span>

  <span class="nb">test</span> <span class="s2">"should get help"</span> <span class="k">do</span>
    <span class="n">get</span> <span class="ss">:help</span>
    <span class="n">assert_response</span> <span class="ss">:success</span>
<span class="hll">    <span class="n">assert_select</span> <span class="s2">"title"</span><span class="p">,</span> <span class="s2">"Help | </span><span class="si">#{</span><span class="vi">@base_title</span><span class="si">}</span><span class="s2">"</span>
</span>  <span class="k">end</span>

  <span class="nb">test</span> <span class="s2">"should get about"</span> <span class="k">do</span>
    <span class="n">get</span> <span class="ss">:about</span>
    <span class="n">assert_response</span> <span class="ss">:success</span>
<span class="hll">    <span class="n">assert_select</span> <span class="s2">"title"</span><span class="p">,</span> <span class="s2">"About | </span><span class="si">#{</span><span class="vi">@base_title</span><span class="si">}</span><span class="s2">"</span>
</span>  <span class="k">end</span>
<span class="k">end</span>
</pre></div></div></div><div class="codelisting" id="code-proposed_contact_page" data-tralics-id="uid323" data-number="3.39"><div class="heading"><span class="number">Listing 3.39:</span> 

<span class="description">Code for a proposed Contact page.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/views/static_pages/contact.html.erb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%</span> <span class="n">provide</span><span class="p">(</span><span class="ss">:title</span><span class="p">,</span> <span class="s2">"Contact"</span><span class="p">)</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;h1&gt;</span>Contact<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;p&gt;</span>
  Contact the Ruby on Rails Tutorial about the sample app at the
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://www.railstutorial.org/#contact"</span><span class="nt">&gt;</span>contact page<span class="nt">&lt;/a&gt;</span>.
<span class="nt">&lt;/p&gt;</span>
</pre></div></div></div></div><div id="sec-advanced_testing_setup" data-tralics-id="cid22" class="section" data-number="3.7"><h2><a href="static_pages_fragment.html#sec-advanced_testing_setup" class="heading hyperref"><span class="number">3.7 </span>Advanced testing setup</a></h2>
<p>This optional section describes the testing setup used in the <a href="http://screencasts.railstutorial.org/" target="_blank">Ruby on Rails Tutorial screencast series</a>.<span class="intersentencespace"></span> There are three main elements: an enhanced pass/fail reporter (<a href="static_pages_fragment.html#sec-minitest_reporters" class="hyperref">Section <span class="ref">3.7.1</span></a>), a utility to filter the backtrace produced by failing tests (<a href="static_pages_fragment.html#sec-backtrace_silencer" class="hyperref">Section <span class="ref">3.7.2</span></a>), and an automated test runner that detects file changes and automatically runs the corresponding tests (<a href="static_pages_fragment.html#sec-guard" class="hyperref">Section <span class="ref">3.7.3</span></a>).<span class="intersentencespace"></span> The code in this section is advanced and is presented for convenience only; you are not expected to understand it at this time.</p>
<p>The changes in this section should be made on the master branch:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git checkout master
</pre></div></div>
<div id="sec-minitest_reporters" data-tralics-id="uid324" class="subsection" data-number="3.7.1"><h3><a href="static_pages_fragment.html#sec-minitest_reporters" class="heading hyperref"><span class="number">3.7.1 </span>minitest reporters</a></h3>
<p>To get the default Rails tests to show <span style="color: red"><span class="sc"></span><span class="sc"><strong>red</strong></span><span class="sc"></span></span> and <span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span> at the appropriate times, I recommend adding the code in <a href="static_pages_fragment.html#code-minitest_reporters" class="hyperref">Listing <span class="ref">3.40</span></a> to your test helper file,<sup id="cha-3_footnote-ref-18" class="footnote"><a href="#cha-3_footnote-18">18</a></sup> thereby making use of the <a href="https://github.com/kern/minitest-reporters" target="_blank"><span class="tt">minitest-reporters</span></a> gem included in <a href="static_pages_fragment.html#code-gemfile_sample_app" class="hyperref">Listing <span class="ref">3.2</span></a>.</p>
<div class="codelisting" id="code-minitest_reporters" data-tralics-id="uid326" data-number="3.40"><div class="heading"><span class="number">Listing 3.40:</span> 

<span class="description">Configuring the tests to show <span style="color: red"><span class="sc"></span><span class="sc"><strong>red</strong></span><span class="sc"></span></span> and <span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span>.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">test/test_helper.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="no">ENV</span><span class="o">[</span><span class="s1">'RAILS_ENV'</span><span class="o">]</span> <span class="o">||=</span> <span class="s1">'test'</span>
<span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">'../../config/environment'</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
<span class="nb">require</span> <span class="s1">'rails/test_help'</span>
<span class="hll"><span class="nb">require</span> <span class="s2">"minitest/reporters"</span>
</span><span class="hll"><span class="no">Minitest</span><span class="o">::</span><span class="no">Reporters</span><span class="o">.</span><span class="n">use!</span>
</span>
<span class="k">class</span> <span class="nc">ActiveSupport</span><span class="o">::</span><span class="no">TestCase</span>
  <span class="c1"># Setup all fixtures in test/fixtures/*.yml for all tests in alphabetical</span>
  <span class="c1"># order.</span>
  <span class="n">fixtures</span> <span class="ss">:all</span>

  <span class="c1"># Add more helper methods to be used by all tests here...</span>
<span class="k">end</span>
</pre></div></div></div><p>The resulting transition from <span style="color: red"><span class="sc"></span><span class="sc"><strong>red</strong></span><span class="sc"></span></span> to <span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span> in the cloud IDE appears as in <a href="static_pages_fragment.html#fig-red_to_green" class="hyperref">Figure <span class="ref">3.8</span></a>.</p>
<div class="center figure" id="fig-red_to_green" data-tralics-id="uid327" data-number="3.8">
<div class="graphics image"><img src="images/figures/red_to_green.png" alt="images/figures/red_to_green"></div><div class="caption"><span class="header">Figure 3.8: </span><span class="description">Going from <span style="color: red"><span class="sc"></span><span class="sc"><strong>red</strong></span><span class="sc"></span></span> to <span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span> in the cloud IDE.
</span></div></div>
</div>
<div id="sec-backtrace_silencer" data-tralics-id="uid328" class="subsection" data-number="3.7.2"><h3><a href="static_pages_fragment.html#sec-backtrace_silencer" class="heading hyperref"><span class="number">3.7.2 </span>Backtrace silencer</a></h3>
<p>Upon encountering an error or failing test, the test runner shows a “stack trace” or “backtrace” that traces the course of a failed test through the application.<span class="intersentencespace"></span> While this backtrace is usually very useful for tracking down the problem, on some systems (including the cloud IDE) it goes past the application code and into the various gem dependencies, including Rails itself.<span class="intersentencespace"></span> The resulting backtrace is often inconveniently long, especially since the source of the problem is usually the application and not one of its dependencies.</p>
<p>The solution is to filter the backtrace to eliminate unwanted lines.<span class="intersentencespace"></span> This requires the <a href="https://github.com/metaskills/mini_backtrace" target="_blank"><span class="tt">mini_backtrace</span></a> gem included in <a href="static_pages_fragment.html#code-gemfile_sample_app" class="hyperref">Listing <span class="ref">3.2</span></a>, combined with a <em>backtrace silencer</em>.<span class="intersentencespace"></span> On the cloud IDE, most unwanted lines contain the string <code>rvm</code> (referring to the Ruby Version Manager), so I recommend using the silencer shown in <a href="static_pages_fragment.html#code-backtrace_silencer" class="hyperref">Listing <span class="ref">3.41</span></a> to filter them out.</p>
<div class="codelisting" id="code-backtrace_silencer" data-tralics-id="uid329" data-number="3.41"><div class="heading"><span class="number">Listing 3.41:</span> 

<span class="description">Adding a backtrace silencer for RVM. <span class="break"></span> <span class="filepath">config/initializers/backtrace_silencers.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="c1"># Be sure to restart your server when you modify this file.</span>

<span class="c1"># You can add backtrace silencers for libraries that you're using but don't</span>
<span class="c1"># wish to see in your backtraces.</span>
<span class="hll"><span class="no">Rails</span><span class="o">.</span><span class="n">backtrace_cleaner</span><span class="o">.</span><span class="n">add_silencer</span> <span class="p">{</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="n">line</span> <span class="o">=~</span> <span class="sr">/rvm/</span> <span class="p">}</span>
</span>
<span class="c1"># You can also remove all the silencers if you're trying to debug a problem</span>
<span class="c1"># that might stem from framework code.</span>
<span class="c1"># Rails.backtrace_cleaner.remove_silencers!</span>
</pre></div></div></div><p>As noted in a comment in <a href="static_pages_fragment.html#code-backtrace_silencer" class="hyperref">Listing <span class="ref">3.41</span></a>, you should restart the local webserver after adding the silencer.</p>
</div>
<div id="sec-guard" data-tralics-id="uid330" class="subsection" data-number="3.7.3"><h3><a href="static_pages_fragment.html#sec-guard" class="heading hyperref"><span class="number">3.7.3 </span>Automated tests with Guard</a></h3>
<p>One annoyance associated with using the <code>rake test</code> command is having to switch to the command line and run the tests by hand.<span class="intersentencespace"></span> To avoid this inconvenience, we can use <a href="https://github.com/guard/guard" target="_blank"><em>Guard</em></a> to automate the running of the tests.<span class="intersentencespace"></span> Guard monitors changes in the filesystem so that, for example, when we change the <code>static_pages_controller_test.rb</code> file, only those tests get run.<span class="intersentencespace"></span> Even better, we can configure Guard so that when, say, the <code>home.html.erb</code> file is modified, the <code>static_pages_controller_test.rb</code> automatically runs.</p>
<p>The <code>Gemfile</code> in <a href="static_pages_fragment.html#code-gemfile_sample_app" class="hyperref">Listing <span class="ref">3.2</span></a> has already included the <span class="tt">guard</span> gem in our application, so to get started we just need to initialize it:</p>
<div class="code"><div class="highlight"><pre>$ bundle exec guard init
Writing new Guardfile to /home/ubuntu/workspace/sample_app/Guardfile
00:51:32 - INFO - minitest guard added to Guardfile, feel free to edit it
</pre></div></div>
<p>We then edit the resulting <code>Guardfile</code> so that Guard will run the right tests when the integration tests and views are updated (<a href="static_pages_fragment.html#code-guardfile" class="hyperref">Listing <span class="ref">3.42</span></a>).<span class="intersentencespace"></span> (Given its length and advanced nature, I recommend just copy-and-pasting the contents of <a href="static_pages_fragment.html#code-guardfile" class="hyperref">Listing <span class="ref">3.42</span></a>.)</p>
<div class="codelisting" id="code-guardfile" data-tralics-id="uid331" data-number="3.42"><div class="heading"><span class="number">Listing 3.42:</span> 

<span class="description">A custom <code>Guardfile</code>.</span>
</div>

<div class="code"><div class="highlight"><pre><span class="c1"># Defines the matching rules for Guard.</span>
<span class="hll"><span class="n">guard</span> <span class="ss">:minitest</span><span class="p">,</span> <span class="ss">spring</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">all_on_start</span><span class="p">:</span> <span class="kp">false</span> <span class="k">do</span>
</span>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^test/(.*)/?(.*)_test\.rb$}</span><span class="p">)</span>
  <span class="n">watch</span><span class="p">(</span><span class="s1">'test/test_helper.rb'</span><span class="p">)</span> <span class="p">{</span> <span class="s1">'test'</span> <span class="p">}</span>
  <span class="n">watch</span><span class="p">(</span><span class="s1">'config/routes.rb'</span><span class="p">)</span>    <span class="p">{</span> <span class="n">integration_tests</span> <span class="p">}</span>
  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^app/models/(.*?)\.rb$}</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">matches</span><span class="o">|</span>
    <span class="s2">"test/models/</span><span class="si">#{</span><span class="n">matches</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">_test.rb"</span>
  <span class="k">end</span>
  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^app/controllers/(.*?)_controller\.rb$}</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">matches</span><span class="o">|</span>
    <span class="n">resource_tests</span><span class="p">(</span><span class="n">matches</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^app/views/([^/]*?)/.*\.html\.erb$}</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">matches</span><span class="o">|</span>
    <span class="o">[</span><span class="s2">"test/controllers/</span><span class="si">#{</span><span class="n">matches</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">_controller_test.rb"</span><span class="o">]</span> <span class="o">+</span>
    <span class="n">integration_tests</span><span class="p">(</span><span class="n">matches</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^app/helpers/(.*?)_helper\.rb$}</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">matches</span><span class="o">|</span>
    <span class="n">integration_tests</span><span class="p">(</span><span class="n">matches</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="n">watch</span><span class="p">(</span><span class="s1">'app/views/layouts/application.html.erb'</span><span class="p">)</span> <span class="k">do</span>
    <span class="s1">'test/integration/site_layout_test.rb'</span>
  <span class="k">end</span>
  <span class="n">watch</span><span class="p">(</span><span class="s1">'app/helpers/sessions_helper.rb'</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">integration_tests</span> <span class="o">&lt;&lt;</span> <span class="s1">'test/helpers/sessions_helper_test.rb'</span>
  <span class="k">end</span>
  <span class="n">watch</span><span class="p">(</span><span class="s1">'app/controllers/sessions_controller.rb'</span><span class="p">)</span> <span class="k">do</span>
    <span class="o">[</span><span class="s1">'test/controllers/sessions_controller_test.rb'</span><span class="p">,</span>
     <span class="s1">'test/integration/users_login_test.rb'</span><span class="o">]</span>
  <span class="k">end</span>
  <span class="n">watch</span><span class="p">(</span><span class="s1">'app/controllers/account_activations_controller.rb'</span><span class="p">)</span> <span class="k">do</span>
    <span class="s1">'test/integration/users_signup_test.rb'</span>
  <span class="k">end</span>
  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{app/views/users/*}</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">resource_tests</span><span class="p">(</span><span class="s1">'users'</span><span class="p">)</span> <span class="o">+</span>
    <span class="o">[</span><span class="s1">'test/integration/microposts_interface_test.rb'</span><span class="o">]</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># Returns the integration tests corresponding to the given resource.</span>
<span class="k">def</span> <span class="nf">integration_tests</span><span class="p">(</span><span class="n">resource</span> <span class="o">=</span> <span class="ss">:all</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">resource</span> <span class="o">==</span> <span class="ss">:all</span>
    <span class="no">Dir</span><span class="o">[</span><span class="s2">"test/integration/*"</span><span class="o">]</span>
  <span class="k">else</span>
    <span class="no">Dir</span><span class="o">[</span><span class="s2">"test/integration/</span><span class="si">#{</span><span class="n">resource</span><span class="si">}</span><span class="s2">_*.rb"</span><span class="o">]</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># Returns the controller tests corresponding to the given resource.</span>
<span class="k">def</span> <span class="nf">controller_test</span><span class="p">(</span><span class="n">resource</span><span class="p">)</span>
  <span class="s2">"test/controllers/</span><span class="si">#{</span><span class="n">resource</span><span class="si">}</span><span class="s2">_controller_test.rb"</span>
<span class="k">end</span>

<span class="c1"># Returns all tests for the given resource.</span>
<span class="k">def</span> <span class="nf">resource_tests</span><span class="p">(</span><span class="n">resource</span><span class="p">)</span>
  <span class="n">integration_tests</span><span class="p">(</span><span class="n">resource</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">controller_test</span><span class="p">(</span><span class="n">resource</span><span class="p">)</span>
<span class="k">end</span>
</pre></div></div></div><p>Here the line</p>
<div class="code"><div class="highlight"><pre><span class="n">guard</span> <span class="ss">:minitest</span><span class="p">,</span> <span class="ss">spring</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">all_on_start</span><span class="p">:</span> <span class="kp">false</span> <span class="k">do</span>
</pre></div></div>
<p>causes Guard to use the Spring server supplied by Rails to speed up loading times, while also preventing Guard from running the full test suite upon starting.</p>
<p>To prevent conflicts between Spring and Git when using Guard, you should add the <code>spring/</code> directory to the <code>.gitignore</code> file used by Git to determine what to ignore when adding files or directories to the repository.<span class="intersentencespace"></span> The way to do this using the cloud IDE is as follows:</p>
<ol>
<li>Click on the gear icon in the upper right part of the file navigation pane (<a href="static_pages_fragment.html#fig-file_navigator_gear_icon" class="hyperref">Figure <span class="ref">3.9</span></a>).<span class="intersentencespace"></span>
</li>
<li>Select “Show hidden files” to show the <code>.gitignore</code> file in the application’s root directory (<a href="static_pages_fragment.html#fig-show_hidden_files" class="hyperref">Figure <span class="ref">3.10</span></a>).<span class="intersentencespace"></span>
</li>
<li>Double-click on the <code>.gitignore</code> file (<a href="static_pages_fragment.html#fig-gitignore" class="hyperref">Figure <span class="ref">3.11</span></a>) to open it, and then fill it with the contents of <a href="static_pages_fragment.html#code-gitignore_spring" class="hyperref">Listing <span class="ref">3.43</span></a>.<span class="intersentencespace"></span>
</li></ol>
<div class="center figure" id="fig-file_navigator_gear_icon" data-tralics-id="uid335" data-number="3.9">
<div class="graphics image"><img src="images/figures/file_navigator_gear_icon.png" alt="images/figures/file_navigator_gear_icon"></div><div class="caption"><span class="header">Figure 3.9: </span><span class="description">The (rather subtle) gear icon in the file navigator pane.
</span></div></div>
<div class="center figure" id="fig-show_hidden_files" data-tralics-id="uid336" data-number="3.10">
<div class="graphics image"><img src="images/figures/show_hidden_files.png" alt="images/figures/show_hidden_files"></div><div class="caption"><span class="header">Figure 3.10: </span><span class="description">Showing hidden files in the file navigator.
</span></div></div>
<div class="center figure" id="fig-gitignore" data-tralics-id="uid337" data-number="3.11">
<div class="graphics image"><img src="images/figures/gitignore.png" alt="images/figures/gitignore"></div><div class="caption"><span class="header">Figure 3.11: </span><span class="description">The normally hidden <code>.gitignore</code> file made visible.
</span></div></div>
<div class="codelisting" id="code-gitignore_spring" data-tralics-id="uid338" data-number="3.43"><div class="heading"><span class="number">Listing 3.43:</span> 

<span class="description">Adding Spring to the <code>.gitignore</code> file.</span>
</div>

<div class="code"><div class="highlight"><pre># See https://help.github.com/articles/ignoring-files for more about ignoring
# files.
#
# If you find yourself ignoring temporary files generated by your text editor
# or operating system, you probably want to add a global ignore instead:
#   git config --global core.excludesfile '~/.gitignore_global'

# Ignore bundler config.
/.bundle

# Ignore the default SQLite database.
/db/*.sqlite3
/db/*.sqlite3-journal

# Ignore all logfiles and tempfiles.
/log/*.log
/tmp

<span class="hll"># Ignore Spring files.
</span><span class="hll">/spring/*.pid
</span></pre></div></div></div><p>The Spring server is still a little quirky as of this writing, and sometimes Spring <em>processes</em> will accumulate and slow performance of your tests.<span class="intersentencespace"></span> If your tests seem to be getting unusually sluggish, it’s thus a good idea to inspect the system processes and kill them if necessary (<a href="static_pages_fragment.html#aside-processes" class="hyperref">Box <span class="ref">3.4</span></a>).</p>
<div class="aside" id="aside-processes" data-tralics-id="uid339" data-number="3.4"><div class="heading"><span class="number">Box 3.4.</span> 

<span class="description">Unix processes</span></div>
<p>On Unix-like systems such as Linux and OS X, user and system tasks each take place within a well-defined container called a <em>process</em>.<span class="intersentencespace"></span> To see all the processes on your system, you can use the <span class="tt">ps</span> command with the <span class="tt">aux</span> options:</p>
<pre>  $ ps aux</pre>
<p>To filter the processes by type, you can run the results of <span class="tt">ps</span> through the <span class="tt">grep</span> pattern-matcher using a Unix pipe <span class="tt">|</span>:</p>
<pre>  $ ps aux | grep spring
  ubuntu 12241 0.3 0.5 589960 178416 ? Ssl Sep20 1:46
  spring app | sample_app | started 7 hours ago</pre>
<p>The result shown gives some details about the process, but the most important thing is the first number, which is the <em>process id</em>, or pid.<span class="intersentencespace"></span> To eliminate an unwanted process, use the <span class="tt">kill</span> command to issue the Unix kill code (which <a href="https://en.wikipedia.org/wiki/Unix_signal#List_of_signals" target="_blank">happens to be 9</a>) to the pid:</p>
<pre>  $ kill -15 12241</pre>
<p>This is the technique I recommend for killing individual processes, such as a rogue Rails server (with the pid found via <span class="tt">ps aux | grep server</span>), but sometimes it’s convenient to kill all the processes matching a particular process name, such as when you want to kill all the <span class="tt">spring</span> processes gunking up your system.<span class="intersentencespace"></span> In this particular case, you should first try stopping the processes with the <span class="tt">spring</span> command itself:</p>
<pre>  $ spring stop</pre>
<p>Sometimes this doesn’t work, though, and you can kill all the processes with name <span class="tt">spring</span> using the <span class="tt">pkill</span> command as follows:</p>
<pre>  $ pkill -15 -f spring</pre>
<p>Any time something isn’t behaving as expected or a process appears to be frozen, it’s a good idea to run <span class="tt">ps aux</span> to see what’s going on, and then run <span class="tt">kill -15 &lt;pid&gt;</span> or <span class="tt">pkill -15 -f &lt;name&gt;</span> to clear things up.</p>

</div><p>Once Guard is configured, you should open a new terminal and (as with the Rails server in <a href="beginning_fragment.html#sec-rails_server" class="hyperref">Section <span class="ref">1.3.2</span></a>) run it at the command line as follows:</p>
<div class="code"><div class="highlight"><pre>$ bundle exec guard
</pre></div></div>
<p>The rules in <a href="static_pages_fragment.html#code-guardfile" class="hyperref">Listing <span class="ref">3.42</span></a> are optimized for this tutorial, automatically running (for example) the integration tests when a controller is changed.<span class="intersentencespace"></span> To run <em>all</em> the tests, hit return at the <code>guard&gt;</code> prompt.<span class="intersentencespace"></span> (This may sometimes give an error indicating a failure to connect to the Spring server.<span class="intersentencespace"></span> To fix the problem, just hit return again.)</p>
<p>To exit Guard, press Ctrl-D. To add additional matchers to Guard, refer to the examples in <a href="static_pages_fragment.html#code-guardfile" class="hyperref">Listing <span class="ref">3.42</span></a>, the <a href="https://github.com/guard/guard" target="_blank">Guard README</a>, and the <a href="https://github.com/guard/guard/wiki" target="_blank">Guard wiki</a>.</p>
</div></div><div id="cha-3_footnotes">
  <ol class="footnotes">
    <li id="cha-3_footnote-1">If you’re using the cloud IDE, it’s often useful to use the “Goto Anything” command, which makes it easy to navigate the filesystem by typing in partial filenames.<span class="intersentencespace"></span> In this context, having the hello, toy, and sample apps present in the same project can be inconvenient due to the many common filenames.<span class="intersentencespace"></span> For example, when searching for a file called “Gemfile”, six possibilities will show up, because each project has matching files called <code>Gemfile</code> and <code>Gemfile.lock</code>.<span class="intersentencespace"></span> Thus, you may want to consider removing the first two apps before proceeding, which you can do by navigating to the <code>workspace</code> directory and running <code>rm -rf hello_app/ toy_app/</code> (<a href="beginning_fragment.html#table-unix_commands" class="hyperref">Table <span class="ref">1.1</span></a>).<span class="intersentencespace"></span> (As long as you pushed the corresponding repositories up to Bitbucket, you can always recover them later.) <a class="arrow" href="#cha-3_footnote-ref-1">↑</a></li>
    <li id="cha-3_footnote-2">It’s worth noting that <span class="inline_verbatim">--without</span> <span class="inline_verbatim">production</span> is a “remembered option”, which means it will be included automatically the next time we run <code>bundle install</code>. <a class="arrow" href="#cha-3_footnote-ref-2">↑</a></li>
    <li id="cha-3_footnote-3">I recommend eventually learning how to install and configure PostgreSQL in development, but the chances are now is not that time.<span class="intersentencespace"></span> When the time comes, Google “install configure postgresql &lt;your system&gt;” and “rails postgresql setup” and prepare for a challenge.<span class="intersentencespace"></span> (On the cloud IDE, &lt;your system&gt; is Ubuntu.) <a class="arrow" href="#cha-3_footnote-ref-3">↑</a></li>
    <li id="cha-3_footnote-4">As noted in <a href="toy_app_fragment.html#cha-a_toy_app" class="hyperref">Chapter <span class="ref">2</span></a>, the main reason for this is that the default Rails page typically breaks at Heroku, which makes it hard to tell if the deployment was successful or not. <a class="arrow" href="#cha-3_footnote-ref-4">↑</a></li>
    <li id="cha-3_footnote-5">Our method for making static pages is probably the simplest, but it’s not the only way.<span class="intersentencespace"></span> The optimal method really depends on your needs; if you expect a <em>large</em> number of static pages, using a Static Pages controller can get quite cumbersome, but in our sample app we’ll only need a few.<span class="intersentencespace"></span> If you do need a lot of static pages, take a look at the <a href="https://github.com/thoughtbot/high_voltage" target="_blank"><span class="tt">high_voltage</span></a> gem.<span class="intersentencespace"></span> For a dated but still useful discussion of this issue, see the <a href="http://blog.hasmanythrough.com/2008/4/2/simple-pages" target="_blank">simple pages post on hasmanythrough</a>. <a class="arrow" href="#cha-3_footnote-ref-5">↑</a></li>
    <li id="cha-3_footnote-6">See, e.g., “<a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html" target="_blank">TDD is dead. Long live testing.</a>” by Rails creator David Heinemeier Hansson. <a class="arrow" href="#cha-3_footnote-ref-6">↑</a></li>
    <li id="cha-3_footnote-7">As noted in <a href="toy_app_fragment.html#sec-demo_users_resource" class="hyperref">Section <span class="ref">2.2</span></a>, the use of <code>bundle exec</code> is unnecessary on some systems, including the cloud IDE recommended in <a href="beginning_fragment.html#sec-development_environment" class="hyperref">Section <span class="ref">1.2.1</span></a>, but I include it for completeness.<span class="intersentencespace"></span> In practice, my usual algorithm is to omit <code>bundle exec</code> unless I get an error, in which case I re-try with <code>bundle exec</code> and see if it works. <a class="arrow" href="#cha-3_footnote-ref-7">↑</a></li>
    <li id="cha-3_footnote-8">By default, <code>rake test</code> shows red when the tests fail, but doesn’t show green when the tests pass.<span class="intersentencespace"></span> To arrange for a true Red–Green cycle, see <a href="static_pages_fragment.html#sec-minitest_reporters" class="hyperref">Section <span class="ref">3.7.1</span></a>. <a class="arrow" href="#cha-3_footnote-ref-8">↑</a></li>
    <li id="cha-3_footnote-9">On some systems, you may have to scroll past the “stack trace” or “backtrace” that traces the error’s path through the source code.<span class="intersentencespace"></span> See <a href="static_pages_fragment.html#sec-backtrace_silencer" class="hyperref">Section <span class="ref">3.7.2</span></a> for information on how to filter this backtrace to eliminate unwanted lines. <a class="arrow" href="#cha-3_footnote-ref-9">↑</a></li>
    <li id="cha-3_footnote-10">HTML changes with time; by explicitly making a doctype declaration we make it likelier that browsers will render our pages properly in the future.<span class="intersentencespace"></span> The simple doctype <code>&lt;!DOCTYPE html&gt;</code> is characteristic of the latest HTML standard, HTML5. <a class="arrow" href="#cha-3_footnote-ref-10">↑</a></li>
    <li id="cha-3_footnote-11">For a list of common minitest assertions, see the <a href="http://guides.rubyonrails.org/testing.html#available-assertions" target="_blank">table of available assertions in the Rails Guides testing article</a>. <a class="arrow" href="#cha-3_footnote-ref-11">↑</a></li>
    <li id="cha-3_footnote-12">Most of the screenshots in this book use Google Chrome, but <a href="static_pages_fragment.html#fig-home_view_full_html" class="hyperref">Figure <span class="ref">3.6</span></a> uses Safari because Chrome doesn’t display the full page title. <a class="arrow" href="#cha-3_footnote-ref-12">↑</a></li>
    <li id="cha-3_footnote-13">There is a second popular template system called <a href="http://haml.info/" target="_blank">Haml</a> (note: not “HAML”), which I personally love, but it’s not <em>quite</em> standard enough yet for use in an introductory tutorial. <a class="arrow" href="#cha-3_footnote-ref-13">↑</a></li>
    <li id="cha-3_footnote-14">Experienced Rails developers might have expected the use of <code>content_for</code> at this point, but it doesn’t work well with the asset pipeline.<span class="intersentencespace"></span> The <code>provide</code> function is its replacement. <a class="arrow" href="#cha-3_footnote-ref-14">↑</a></li>
    <li id="cha-3_footnote-15">If you’ve studied Ruby before, you might suspect that Rails is <em>yielding</em> the contents to a block, and your suspicion would be correct.<span class="intersentencespace"></span> But you don’t need to know this to develop applications with Rails. <a class="arrow" href="#cha-3_footnote-ref-15">↑</a></li>
    <li id="cha-3_footnote-16">If you get an error message saying that the Spring process id (pid) file would be overwritten by the merge, just remove the file using <code>rm -f *.pid</code> at the command line. <a class="arrow" href="#cha-3_footnote-ref-16">↑</a></li>
    <li id="cha-3_footnote-17">This exercise is solved in <a href="filling_in_the_layout_fragment.html#sec-contact_page" class="hyperref">Section <span class="ref">5.3.1</span></a>. <a class="arrow" href="#cha-3_footnote-ref-17">↑</a></li>
    <li id="cha-3_footnote-18">The code in <a href="static_pages_fragment.html#code-minitest_reporters" class="hyperref">Listing <span class="ref">3.40</span></a> mixes single- and double-quoted strings.<span class="intersentencespace"></span> This is because <code>rails new</code> generates single-quoted strings, whereas the <a href="https://github.com/kern/minitest-reporters" target="_blank">minitest reporters documentation</a> uses double-quoted strings.<span class="intersentencespace"></span> This mixing of the two string types is common in Ruby; see <a href="rails_flavored_ruby_fragment.html#sec-strings" class="hyperref">Section <span class="ref">4.2.2</span></a> for more information. <a class="arrow" href="#cha-3_footnote-ref-18">↑</a></li>
  </ol>
</div>